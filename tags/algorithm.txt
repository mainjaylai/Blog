2:I[6379,["231","static/chunks/231-34a6a67d2da26855.js","166","static/chunks/166-f8ba395620a18dc5.js","605","static/chunks/app/tags/%5Btag%5D/page-5faa22720f8478c1.js"],"default"]
3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","904","static/chunks/app/tags/page-61e34f5a746de6ec.js"],""]
a:I[8173,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["tag","algorithm","d"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["tags",{"children":[["tag","algorithm","d"],{"children":["__PAGE__?{\"tag\":\"algorithm\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["tags",{"children":[["tag","algorithm","d"],{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"posts":[{"title":"Aho-Corasick算法","date":"2024-12-11T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"Aho-Corasick 算法是一种高效的多模式字符串匹配算法，通过构建 Trie 和失败指针，实现快速匹配多个模式，广泛应用于文本过滤、生物信息学和网络安全等领域。","layout":"PostSimple","type":"Blog","readingTime":{"text":"4 min read","minutes":3.905,"time":234300,"words":781},"slug":"algorithm/Aho–Corasick","path":"blog/algorithm/Aho–Corasick","filePath":"blog/algorithm/Aho–Corasick.mdx","toc":[{"value":"算法原理","url":"#算法原理","depth":2},{"value":"Trie 构建","url":"#trie-构建","depth":3},{"value":"失败函数构建","url":"#失败函数构建","depth":3},{"value":"匹配过程","url":"#匹配过程","depth":2},{"value":"时间复杂度","url":"#时间复杂度","depth":2},{"value":"应用场景","url":"#应用场景","depth":2},{"value":"示例代码","url":"#示例代码","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Aho-Corasick算法","datePublished":"2024-12-11T00:00:00.000Z","dateModified":"2024-12-11T00:00:00.000Z","description":"Aho-Corasick 算法是一种高效的多模式字符串匹配算法，通过构建 Trie 和失败指针，实现快速匹配多个模式，广泛应用于文本过滤、生物信息学和网络安全等领域。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/Aho–Corasick","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"差分数组","date":"2024-12-11T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"差分数组是一种高效处理区间更新的数据结构，通过记录变化量实现快速更新。它将区间操作的时间复杂度从 O(n) 降低到 O(1)，适用于频繁更新的场景，如区间加法、乘法和赋值。","layout":"PostSimple","type":"Blog","readingTime":{"text":"4 min read","minutes":3.69,"time":221400,"words":738},"slug":"algorithm/DifferenceArray","path":"blog/algorithm/DifferenceArray","filePath":"blog/algorithm/DifferenceArray.mdx","toc":[{"value":"基本概念","url":"#基本概念","depth":2},{"value":"还原原数组","url":"#还原原数组","depth":2},{"value":"示例","url":"#示例","depth":2},{"value":"差分数组的构建与更新","url":"#差分数组的构建与更新","depth":3},{"value":"还原更新后的数组","url":"#还原更新后的数组","depth":3},{"value":"示例代码","url":"#示例代码-1","depth":2},{"value":"应用场景","url":"#应用场景-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"差分数组","datePublished":"2024-12-11T00:00:00.000Z","dateModified":"2024-12-11T00:00:00.000Z","description":"差分数组是一种高效处理区间更新的数据结构，通过记录变化量实现快速更新。它将区间操作的时间复杂度从 O(n) 降低到 O(1)，适用于频繁更新的场景，如区间加法、乘法和赋值。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/DifferenceArray","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"Manacher算法","date":"2024-12-11T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"Manacher算法是一种高效的算法，用于在O(n)时间复杂度内找到字符串中最长的回文子串。通过预处理字符串和利用对称性，该算法能够快速更新和计算回文子串的长度，是解决回文问题的经典方法。","layout":"PostSimple","type":"Blog","readingTime":{"text":"4 min read","minutes":3.655,"time":219300,"words":731},"slug":"algorithm/Manacher","path":"blog/algorithm/Manacher","filePath":"blog/algorithm/Manacher.mdx","toc":[{"value":"算法思想","url":"#算法思想","depth":2},{"value":"详细步骤","url":"#详细步骤","depth":2},{"value":"代码示例","url":"#代码示例","depth":2},{"value":"相关LeetCode题目","url":"#相关leetcode题目","depth":2},{"value":"总结","url":"#总结","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Manacher算法","datePublished":"2024-12-11T00:00:00.000Z","dateModified":"2024-12-11T00:00:00.000Z","description":"Manacher算法是一种高效的算法，用于在O(n)时间复杂度内找到字符串中最长的回文子串。通过预处理字符串和利用对称性，该算法能够快速更新和计算回文子串的长度，是解决回文问题的经典方法。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/Manacher","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"后缀数组","date":"2024-12-11T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"后缀数组是一种高效的字符串处理数据结构，存储字符串所有后缀的字典序排序。它在字符串匹配、最长公共前缀计算和重复子串查找等问题中应用广泛。通过倍增算法构建，时间复杂度为 O(n log n)。","layout":"PostSimple","type":"Blog","readingTime":{"text":"4 min read","minutes":3.34,"time":200400,"words":668},"slug":"algorithm/SuffixArray","path":"blog/algorithm/SuffixArray","filePath":"blog/algorithm/SuffixArray.mdx","toc":[{"value":"定义","url":"#定义","depth":2},{"value":"构建后缀数组","url":"#构建后缀数组","depth":2},{"value":"示例代码","url":"#示例代码-2","depth":3},{"value":"应用","url":"#应用","depth":2},{"value":"例子","url":"#例子","depth":2},{"value":"结论","url":"#结论-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"后缀数组","datePublished":"2024-12-11T00:00:00.000Z","dateModified":"2024-12-11T00:00:00.000Z","description":"后缀数组是一种高效的字符串处理数据结构，存储字符串所有后缀的字典序排序。它在字符串匹配、最长公共前缀计算和重复子串查找等问题中应用广泛。通过倍增算法构建，时间复杂度为 O(n log n)。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/SuffixArray","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"字典树（Trie）","date":"2024-12-11T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"字典树（Trie）是一种高效的树形数据结构，用于存储和快速查找字符串集合。它通过共享公共前缀来节省空间，适用于自动补全、拼写检查和IP路由等场景。","layout":"PostSimple","type":"Blog","readingTime":{"text":"4 min read","minutes":3.115,"time":186900,"words":623},"slug":"algorithm/Trie","path":"blog/algorithm/Trie","filePath":"blog/algorithm/Trie.mdx","toc":[{"value":"基本结构","url":"#基本结构","depth":2},{"value":"操作","url":"#操作","depth":2},{"value":"插入","url":"#插入","depth":3},{"value":"查找","url":"#查找","depth":3},{"value":"删除","url":"#删除","depth":3},{"value":"优点","url":"#优点","depth":2},{"value":"应用","url":"#应用-1","depth":2},{"value":"示例","url":"#示例-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"字典树（Trie）","datePublished":"2024-12-11T00:00:00.000Z","dateModified":"2024-12-11T00:00:00.000Z","description":"字典树（Trie）是一种高效的树形数据结构，用于存储和快速查找字符串集合。它通过共享公共前缀来节省空间，适用于自动补全、拼写检查和IP路由等场景。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/Trie","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"树状数组（Binary Indexed Tree/Fenwick Tree）详解","date":"2024-11-06T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"树状数组是一种高效的数据结构，用于处理前缀和查询和单点修改的问题。它通过二进制分段的方式，实现高效的修改和查询操作。相比线段树，它的实现更简单，常数更小，但功能相对受限。在实际应用中，如果问题可以用树状数组解决，它通常是比线段树更好的选择。","layout":"PostSimple","type":"Blog","readingTime":{"text":"9 min read","minutes":8.905,"time":534300,"words":1781},"slug":"algorithm/binary-indexed-tree","path":"blog/algorithm/binary-indexed-tree","filePath":"blog/algorithm/binary-indexed-tree.mdx","toc":[{"value":"1. 为什么需要树状数组？","url":"#1-为什么需要树状数组","depth":2},{"value":"1.1 问题起源","url":"#11-问题起源","depth":3},{"value":"1.2 树状数组的本质","url":"#12-树状数组的本质","depth":3},{"value":"2. 树状数组的设计思想","url":"#2-树状数组的设计思想","depth":2},{"value":"2.1 核心思想","url":"#21-核心思想","depth":3},{"value":"2.2 为什么这样设计是高效的？","url":"#22-为什么这样设计是高效的","depth":3},{"value":"3. 树状数组的应用场景","url":"#3-树状数组的应用场景","depth":2},{"value":"3.1 实际应用场景","url":"#31-实际应用场景","depth":3},{"value":"3.2 算法题中的应用","url":"#32-算法题中的应用","depth":3},{"value":"4. 基本操作","url":"#4-基本操作","depth":2},{"value":"4.1 完整的树状数组实现","url":"#41-完整的树状数组实现","depth":3},{"value":"4.2 二维树状数组","url":"#42-二维树状数组","depth":3},{"value":"5. 树状数组的优化和扩展","url":"#5-树状数组的优化和扩展","depth":2},{"value":"5.1 区间修改","url":"#51-区间修改","depth":3},{"value":"5.2 离散化处理","url":"#52-离散化处理","depth":3},{"value":"6. LeetCode 练习题","url":"#6-leetcode-练习题","depth":2},{"value":"6.1 基础题目","url":"#61-基础题目","depth":3},{"value":"6.2 进阶题目","url":"#62-进阶题目","depth":3},{"value":"6.3 高级题目","url":"#63-高级题目","depth":3},{"value":"6.4 练习建议","url":"#64-练习建议","depth":3},{"value":"7. 总结","url":"#7-总结","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"树状数组（Binary Indexed Tree/Fenwick Tree）详解","datePublished":"2024-11-06T00:00:00.000Z","dateModified":"2024-11-06T00:00:00.000Z","description":"树状数组是一种高效的数据结构，用于处理前缀和查询和单点修改的问题。它通过二进制分段的方式，实现高效的修改和查询操作。相比线段树，它的实现更简单，常数更小，但功能相对受限。在实际应用中，如果问题可以用树状数组解决，它通常是比线段树更好的选择。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/binary-indexed-tree","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"线段树（Segment Tree）详解","date":"2024-11-06T00:00:00.000Z","tags":["algorithm"],"draft":false,"summary":"线段树是一种高效的数据结构，用于处理区间查询和修改操作。它通过将区间划分为多个小区间，并用树状结构管理这些区间的数据，从而在查询和修改操作之间取得了很好的平衡。","layout":"PostSimple","type":"Blog","readingTime":{"text":"14 min read","minutes":13.57,"time":814200,"words":2714},"slug":"algorithm/segment-tree","path":"blog/algorithm/segment-tree","filePath":"blog/algorithm/segment-tree.mdx","toc":[{"value":"1. 为什么需要线段树？","url":"#1-为什么需要线段树","depth":2},{"value":"1.1 问题起源","url":"#11-问题起源-1","depth":3},{"value":"1.2 线段树的本质","url":"#12-线段树的本质","depth":3},{"value":"2. 线段树的设计思想","url":"#2-线段树的设计思想","depth":2},{"value":"2.1 核心思想","url":"#21-核心思想-1","depth":3},{"value":"2.2 为什么这样设计是高效的？","url":"#22-为什么这样设计是高效的-1","depth":3},{"value":"3. 线段树的应用场景","url":"#3-线段树的应用场景","depth":2},{"value":"3.1 实际应用场景","url":"#31-实际应用场景-1","depth":3},{"value":"3.2 算法题中的应用","url":"#32-算法题中的应用-1","depth":3},{"value":"4. 线段树的优化技巧","url":"#4-线段树的优化技巧","depth":2},{"value":"4.1 内存优化","url":"#41-内存优化","depth":3},{"value":"4.2 性能优化","url":"#42-性能优化","depth":3},{"value":"5. 线段树的扩展","url":"#5-线段树的扩展","depth":2},{"value":"5.1 二维线段树","url":"#51-二维线段树","depth":3},{"value":"5.2 可持久化线段树","url":"#52-可持久化线段树","depth":3},{"value":"6. 基本操作","url":"#6-基本操作","depth":2},{"value":"6.1 完整的线段树实现","url":"#61-完整的线段树实现","depth":3},{"value":"6.2 其他常见操作的实现","url":"#62-其他常见操作的实现","depth":3},{"value":"7. 总结","url":"#7-总结-1","depth":2},{"value":"8. LeetCode 练习题","url":"#8-leetcode-练习题","depth":2},{"value":"8.1 基础题目","url":"#81-基础题目","depth":3},{"value":"8.2 进阶题目","url":"#82-进阶题目","depth":3},{"value":"8.3 高级题目","url":"#83-高级题目","depth":3},{"value":"8.4 扩展应用","url":"#84-扩展应用","depth":3},{"value":"8.5 练习建议","url":"#85-练习建议","depth":3}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"线段树（Segment Tree）详解","datePublished":"2024-11-06T00:00:00.000Z","dateModified":"2024-11-06T00:00:00.000Z","description":"线段树是一种高效的数据结构，用于处理区间查询和修改操作。它通过将区间划分为多个小区间，并用树状结构管理这些区间的数据，从而在查询和修改操作之间取得了很好的平衡。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/algorithm/segment-tree","author":[{"@type":"Person","name":"mainJayLai"}]}}],"title":"Algorithm"}]],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"algorithm"}],["$","meta","3",{"name":"description","content":"A blog created with Next.js and Tailwind.css by MainJayLai"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/tags/algorithm"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/tags/algorithm/feed.xml"}],["$","meta","8",{"property":"og:title","content":"algorithm"}],["$","meta","9",{"property":"og:description","content":"MainJayLai Blog algorithm tagged content"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/tags/algorithm"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"website"}],["$","meta","15",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","16",{"name":"twitter:title","content":"algorithm"}],["$","meta","17",{"name":"twitter:description","content":"MainJayLai Blog algorithm tagged content"}],["$","meta","18",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","19",{"name":"next-size-adjust"}]]
1:null
