2:I[6379,["231","static/chunks/231-34a6a67d2da26855.js","166","static/chunks/166-f8ba395620a18dc5.js","605","static/chunks/app/tags/%5Btag%5D/page-5faa22720f8478c1.js"],"default"]
3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","904","static/chunks/app/tags/page-61e34f5a746de6ec.js"],""]
a:I[8173,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["tag","go","d"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["tags",{"children":[["tag","go","d"],{"children":["__PAGE__?{\"tag\":\"go\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["tags",{"children":[["tag","go","d"],{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"posts":[{"title":"深入理解 Go 的内存对齐与分配机制","date":"2025-08-20T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"文章深入介绍了 Go 语言中的内存对齐与内存分配机制，从原理到实践结合示例，展示如何通过结构体字段优化、对象池使用等手段提升性能并减少内存浪费。","layout":"PostSimple","type":"Blog","readingTime":{"text":"7 min read","minutes":6.84,"time":410400,"words":1368},"slug":"go/go-memory-alignment-and-allocation","path":"blog/go/go-memory-alignment-and-allocation","filePath":"blog/go/go-memory-alignment-and-allocation.mdx","toc":[{"value":"一、引言：为什么你需要关心内存对齐和分配？","url":"#一引言为什么你需要关心内存对齐和分配","depth":2},{"value":"二、内存对齐机制详解","url":"#二内存对齐机制详解","depth":2},{"value":"1. 什么是内存对齐？","url":"#1-什么是内存对齐","depth":3},{"value":"2. Go 中的对齐规则","url":"#2-go-中的对齐规则","depth":3},{"value":"3. 示例：字段排列的影响","url":"#3-示例字段排列的影响","depth":3},{"value":"三、Go 的内存分配策略","url":"#三go-的内存分配策略","depth":2},{"value":"1. 内存分配流程","url":"#1-内存分配流程","depth":3},{"value":"2. 分配层级结构","url":"#2-分配层级结构","depth":3},{"value":"3. 示例：小对象与大对象","url":"#3-示例小对象与大对象","depth":3},{"value":"四、实践案例","url":"#四实践案例","depth":2},{"value":"案例 1：结构体内存优化","url":"#案例-1结构体内存优化","depth":3},{"value":"案例 2：减少 GC 压力","url":"#案例-2减少-gc-压力","depth":3},{"value":"五、深入探索","url":"#五深入探索","depth":2},{"value":"1. Cache Line 与伪共享","url":"#1-cache-line-与伪共享","depth":3},{"value":"2. GC 与内存分配器源码","url":"#2-gc-与内存分配器源码","depth":3},{"value":"3. 内存分析工具","url":"#3-内存分析工具","depth":3},{"value":"4. 逃逸分析","url":"#4-逃逸分析","depth":3},{"value":"六、结语","url":"#六结语","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"深入理解 Go 的内存对齐与分配机制","datePublished":"2025-08-20T00:00:00.000Z","dateModified":"2025-08-20T00:00:00.000Z","description":"文章深入介绍了 Go 语言中的内存对齐与内存分配机制，从原理到实践结合示例，展示如何通过结构体字段优化、对象池使用等手段提升性能并减少内存浪费。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/go-memory-alignment-and-allocation","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"为什么 Go 语言的错误处理如此出色","date":"2025-03-28T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"Go 的 if err != nil 错误处理模式虽备受争议，却是其设计优势所在。通过将错误视为值，Go 迫使开发者显式处理错误情况，避免了隐藏的控制流，提供了清晰的错误传播链。这种方式虽看似繁琐，却让程序更可靠、透明、可预测，并赋予开发者对错误处理的完全控制权。","layout":"PostSimple","type":"Blog","readingTime":{"text":"12 min read","minutes":11.4,"time":684000,"words":2280},"slug":"go/why-go-error-handling-is-awesome","path":"blog/go/why-go-error-handling-is-awesome","filePath":"blog/go/why-go-error-handling-is-awesome.mdx","toc":[{"value":"Go 的错误处理哲学","url":"#go-的错误处理哲学","depth":2},{"value":"其他语言的做法：抛出异常","url":"#其他语言的做法抛出异常","depth":2},{"value":"为什么 Go 不使用异常进行错误处理","url":"#为什么-go-不使用异常进行错误处理","depth":2},{"value":"Go 的禅理","url":"#go-的禅理","depth":3},{"value":"基于异常的代码通常不透明","url":"#基于异常的代码通常不透明","depth":3},{"value":"Go 错误语法的好处","url":"#go-错误语法的好处","depth":2},{"value":"轻松创建可操作的错误链","url":"#轻松创建可操作的错误链","depth":3}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"为什么 Go 语言的错误处理如此出色","datePublished":"2025-03-28T00:00:00.000Z","dateModified":"2025-03-28T00:00:00.000Z","description":"Go 的 if err != nil 错误处理模式虽备受争议，却是其设计优势所在。通过将错误视为值，Go 迫使开发者显式处理错误情况，避免了隐藏的控制流，提供了清晰的错误传播链。这种方式虽看似繁琐，却让程序更可靠、透明、可预测，并赋予开发者对错误处理的完全控制权。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/why-go-error-handling-is-awesome","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"Go Generate 完全指南","date":"2024-11-25T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"Go 的代码生成功能虽然简单，但非常强大和实用。通过 go generate 命令，我们可以实现自动化重复性代码的生成，实现类似泛型功能（在 Go 1.18 之前特别有用），生成高效的查找表和常量，自动化字符串表示的生成，集成各种代码生成工具。通过正确使用这些功能，我们可以大大提高 Go 开发的效率和代码质量。","layout":"PostSimple","type":"Blog","readingTime":{"text":"23 min read","minutes":22.765,"time":1365900,"words":4553},"slug":"go/go-generate","path":"blog/go/go-generate","filePath":"blog/go/go-generate.mdx","toc":[{"value":"基础知识","url":"#基础知识","depth":2},{"value":"一个简单的例子","url":"#一个简单的例子","depth":2},{"value":"生成器能做什么？","url":"#生成器能做什么","depth":2},{"value":"生成器深入探讨：stringer","url":"#生成器深入探讨stringer","depth":2},{"value":"源码生成器和构建标签","url":"#源码生成器和构建标签","depth":2},{"value":"高级特性","url":"#高级特性","depth":2},{"value":"-command 标志","url":"#-command-标志","depth":3},{"value":"-run 标志","url":"#-run-标志","depth":3},{"value":"DOLLAR 环境变量","url":"#dollar-环境变量","depth":3}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Go Generate 完全指南","datePublished":"2024-11-25T00:00:00.000Z","dateModified":"2024-11-25T00:00:00.000Z","description":"Go 的代码生成功能虽然简单，但非常强大和实用。通过 go generate 命令，我们可以实现自动化重复性代码的生成，实现类似泛型功能（在 Go 1.18 之前特别有用），生成高效的查找表和常量，自动化字符串表示的生成，集成各种代码生成工具。通过正确使用这些功能，我们可以大大提高 Go 开发的效率和代码质量。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/go-generate","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"基于 Postgres 的通知模式（Notifier Pattern）","date":"2024-11-22T00:00:00.000Z","tags":["backend","go","database"],"draft":false,"summary":"Postgres 的 LISTEN/NOTIFY 功能通过通知器模式优化了连接管理，减少了每个程序需要的数据库连接数量，避免了为每个主题创建多个连接。通过使用缓冲通道和非阻塞发送，通知器能够高效处理大量通知。同时，结合上下文超时机制和“让它崩溃”策略，可以确保系统在出现问题时快速恢复。PgBouncer 的会话池模式支持 LISTEN，提高连接效率。","layout":"PostSimple","type":"Blog","readingTime":{"text":"13 min read","minutes":12.31,"time":738600,"words":2462},"slug":"go/postgres-notifier","path":"blog/go/postgres-notifier","filePath":"blog/go/postgres-notifier.mdx","toc":[{"value":"通知器模式的核心原则","url":"#通知器模式的核心原则","depth":2},{"value":"通知器的实现细节","url":"#通知器的实现细节","depth":2},{"value":"重要实现细节","url":"#重要实现细节","depth":3},{"value":"可中断的接收机制","url":"#可中断的接收机制","depth":2},{"value":"内部闭包的处理机制","url":"#内部闭包的处理机制","depth":2},{"value":"“让它崩溃” 的思想","url":"#让它崩溃-的思想","depth":2},{"value":"PgBouncer 的使用","url":"#pgbouncer-的使用","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"基于 Postgres 的通知模式（Notifier Pattern）","datePublished":"2024-11-22T00:00:00.000Z","dateModified":"2024-11-22T00:00:00.000Z","description":"Postgres 的 LISTEN/NOTIFY 功能通过通知器模式优化了连接管理，减少了每个程序需要的数据库连接数量，避免了为每个主题创建多个连接。通过使用缓冲通道和非阻塞发送，通知器能够高效处理大量通知。同时，结合上下文超时机制和“让它崩溃”策略，可以确保系统在出现问题时快速恢复。PgBouncer 的会话池模式支持 LISTEN，提高连接效率。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/postgres-notifier","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"Go 1.22 中更优秀的 HTTP 服务器路由","date":"2024-11-21T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"Go 1.22 将引入增强版 HTTP 路由多路复用器，提供更强大的路径匹配和方法路由能力。新的 ServeMux 支持通配符、方法限定和细粒度路由，有望减少对第三方路由库的依赖，为 Go Web 开发带来便利。","layout":"PostSimple","type":"Blog","readingTime":{"text":"7 min read","minutes":6.775,"time":406500,"words":1355},"slug":"go/mux","path":"blog/go/mux","filePath":"blog/go/mux.mdx","toc":[{"value":"使用新的 mux","url":"#使用新的-mux","depth":2},{"value":"使用新的 mux 重新实现任务服务器","url":"#使用新的-mux-重新实现任务服务器","depth":2},{"value":"结论","url":"#结论-8","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Go 1.22 中更优秀的 HTTP 服务器路由","datePublished":"2024-11-21T00:00:00.000Z","dateModified":"2024-11-21T00:00:00.000Z","description":"Go 1.22 将引入增强版 HTTP 路由多路复用器，提供更强大的路径匹配和方法路由能力。新的 ServeMux 支持通配符、方法限定和细粒度路由，有望减少对第三方路由库的依赖，为 Go Web 开发带来便利。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/mux","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"深入理解 Go 的 Context 包","date":"2024-11-18T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"Go 的 context 包提供了强大的工具，用于管理请求范围内的超时、取消和数据传递。通过函数如 WithCancel、WithTimeout 和 WithValue，开发者可高效处理并发任务和资源释放，是构建健壮程序的重要组件。","layout":"PostSimple","type":"Blog","readingTime":{"text":"15 min read","minutes":14.77,"time":886200,"words":2954},"slug":"go/go-context","path":"blog/go/go-context","filePath":"blog/go/go-context.mdx","toc":[{"value":"Context 类型","url":"#context-类型","depth":2},{"value":"Context 实战","url":"#context-实战","depth":2},{"value":"WithValue 函数","url":"#withvalue-函数","depth":2},{"value":"WithCancel 函数","url":"#withcancel-函数","depth":2},{"value":"WithTimeout 函数","url":"#withtimeout-函数","depth":2},{"value":"总结","url":"#总结-5","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"深入理解 Go 的 Context 包","datePublished":"2024-11-18T00:00:00.000Z","dateModified":"2024-11-18T00:00:00.000Z","description":"Go 的 context 包提供了强大的工具，用于管理请求范围内的超时、取消和数据传递。通过函数如 WithCancel、WithTimeout 和 WithValue，开发者可高效处理并发任务和资源释放，是构建健壮程序的重要组件。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/go-context","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"使用Redis实现Golang API限流","date":"2024-11-15T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"这篇文章介绍了如何使用Redis在Golang API中实现限流功能。通过Gin框架搭建HTTP服务器，利用go-redis/redis_rate包来追踪和限制每个IP地址的请求频率。文章通过实例代码展示了如何设置每分钟10次的请求限制，并详细说明了限流器的工作原理和实现方法。","layout":"PostSimple","type":"Blog","readingTime":{"text":"9 min read","minutes":8.22,"time":493200,"words":1644},"slug":"go/redis-ratelimit","path":"blog/go/redis-ratelimit","filePath":"blog/go/redis-ratelimit.mdx","toc":[{"value":"前提条件","url":"#前提条件","depth":2},{"value":"开始使用","url":"#开始使用","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"使用Redis实现Golang API限流","datePublished":"2024-11-15T00:00:00.000Z","dateModified":"2024-11-15T00:00:00.000Z","description":"这篇文章介绍了如何使用Redis在Golang API中实现限流功能。通过Gin框架搭建HTTP服务器，利用go-redis/redis_rate包来追踪和限制每个IP地址的请求频率。文章通过实例代码展示了如何设置每分钟10次的请求限制，并详细说明了限流器的工作原理和实现方法。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/redis-ratelimit","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"深入理解Go SQL内部机制","date":"2024-11-13T00:00:00.000Z","tags":["database","backend","go"],"draft":false,"summary":"这是一篇关于Go SQL内部机制的深度解析文章。文章详细探讨了预处理语句的工作原理、连接池的生命周期管理，以及实际生产环境中常见的问题和解决方案。同时提供了具体的客户端和服务器端配置建议，对于构建高性能Go数据库应用具有重要的参考价值。","layout":"PostSimple","type":"Blog","readingTime":{"text":"17 min read","minutes":16.91,"time":1014600,"words":3382},"slug":"go/go-sql","path":"blog/go/go-sql","filePath":"blog/go/go-sql.mdx","toc":[{"value":"引言","url":"#引言-3","depth":2},{"value":"为什么这很重要","url":"#为什么这很重要","depth":3},{"value":"预处理语句","url":"#预处理语句","depth":2},{"value":"预处理语句生命周期","url":"#预处理语句生命周期","depth":3},{"value":"语句准备","url":"#语句准备","depth":3},{"value":"查询执行","url":"#查询执行","depth":3},{"value":"释放连接","url":"#释放连接","depth":3},{"value":"获取连接","url":"#获取连接","depth":3},{"value":"连接重用尝试","url":"#连接重用尝试","depth":4},{"value":"处理连接稀缺","url":"#处理连接稀缺","depth":4},{"value":"实际问题","url":"#实际问题","depth":2},{"value":"WaitCount增加问题","url":"#waitcount增加问题","depth":3},{"value":"内部错误增加","url":"#内部错误增加","depth":3},{"value":"最大连接数","url":"#最大连接数","depth":3},{"value":"建议","url":"#建议","depth":2},{"value":"客户端建议","url":"#客户端建议","depth":3},{"value":"服务器端建议","url":"#服务器端建议","depth":3},{"value":"动手实践","url":"#动手实践","depth":2},{"value":"结论","url":"#结论-7","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"深入理解Go SQL内部机制","datePublished":"2024-11-13T00:00:00.000Z","dateModified":"2024-11-13T00:00:00.000Z","description":"这是一篇关于Go SQL内部机制的深度解析文章。文章详细探讨了预处理语句的工作原理、连接池的生命周期管理，以及实际生产环境中常见的问题和解决方案。同时提供了具体的客户端和服务器端配置建议，对于构建高性能Go数据库应用具有重要的参考价值。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/go-sql","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"Go语言 HTTP 服务模糊测试教程","date":"2024-11-12T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"Go语言的模糊测试（Fuzzing）是一种通过输入大量随机数据来发现程序潜在bug的自动化测试技术。Go 1.18后，它被加入标准库，使开发者能更容易地对HTTP服务和其他函数进行模糊测试。这种测试方法特别擅长发现那些在常规测试中难以发现的边界情况和异常问题。","layout":"PostSimple","type":"Blog","readingTime":{"text":"12 min read","minutes":11.085,"time":665100,"words":2217},"slug":"go/fuzzing-test","path":"blog/go/fuzzing-test","filePath":"blog/go/fuzzing-test.mdx","toc":[{"value":"什么是模糊测试？","url":"#什么是模糊测试","depth":2},{"value":"Go中的模糊测试","url":"#go中的模糊测试","depth":2},{"value":"HTTP服务的模糊测试","url":"#http服务的模糊测试","depth":2},{"value":"结论","url":"#结论-6","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Go语言 HTTP 服务模糊测试教程","datePublished":"2024-11-12T00:00:00.000Z","dateModified":"2024-11-12T00:00:00.000Z","description":"Go语言的模糊测试（Fuzzing）是一种通过输入大量随机数据来发现程序潜在bug的自动化测试技术。Go 1.18后，它被加入标准库，使开发者能更容易地对HTTP服务和其他函数进行模糊测试。这种测试方法特别擅长发现那些在常规测试中难以发现的边界情况和异常问题。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/fuzzing-test","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"ThrottleX——高性能分布式限流库","date":"2024-11-11T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"ThrottleX 是一个用 Go 语言实现的高性能分布式限流库，提供了三种主流限流算法的实现。该项目特别注重性能优化和分布式场景支持，可以轻松应对高并发环境下的限流需求。ThrottleX 根据定义的策略（如固定窗口、滑动窗口和令牌桶）限制可以到达后端（无论是 Web 服务器、API 等）的请求数量，从而管理请求流。","layout":"PostSimple","type":"Blog","readingTime":{"text":"20 min read","minutes":19.355,"time":1161300,"words":3871},"slug":"go/ThrottleX","path":"blog/go/ThrottleX","filePath":"blog/go/ThrottleX.mdx","toc":[{"value":"目录","url":"#目录-9","depth":2},{"value":"项目简介","url":"#项目简介","depth":2},{"value":"项目链接","url":"#项目链接","depth":2},{"value":"系统架构图","url":"#系统架构图","depth":2},{"value":"总架构","url":"#总架构","depth":3},{"value":"请求流","url":"#请求流","depth":3},{"value":"数据存储和限流规则","url":"#数据存储和限流规则","depth":3},{"value":"核心功能","url":"#核心功能","depth":2},{"value":"1. 多种限流算法","url":"#1-多种限流算法","depth":3},{"value":"1.1 固定窗口限流","url":"#11-固定窗口限流","depth":4},{"value":"1.2 滑动窗口限流","url":"#12-滑动窗口限流","depth":4},{"value":"1.3 令牌桶限流","url":"#13-令牌桶限流","depth":4},{"value":"2. 存储层设计","url":"#2-存储层设计","depth":3},{"value":"2.1 统一存储接口","url":"#21-统一存储接口","depth":4},{"value":"2.2 内存存储实现","url":"#22-内存存储实现","depth":4},{"value":"2.3 Redis 存储实现","url":"#23-redis-存储实现","depth":4},{"value":"3. 并发控制","url":"#3-并发控制","depth":3},{"value":"3.1 互斥锁设计","url":"#31-互斥锁设计","depth":4},{"value":"关键优化","url":"#关键优化","depth":2},{"value":"内存优化","url":"#内存优化","depth":3},{"value":"Redis 优化","url":"#redis-优化","depth":3},{"value":"断路器以防止过载","url":"#断路器以防止过载","depth":3},{"value":"存在的问题","url":"#存在的问题","depth":2},{"value":"Go 的垃圾收集","url":"#go-的垃圾收集","depth":3},{"value":"Redis 复制延迟","url":"#redis-复制延迟","depth":3},{"value":"网络延迟","url":"#网络延迟","depth":3},{"value":"自适应速率限制","url":"#自适应速率限制","depth":3}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"ThrottleX——高性能分布式限流库","datePublished":"2024-11-11T00:00:00.000Z","dateModified":"2024-11-11T00:00:00.000Z","description":"ThrottleX 是一个用 Go 语言实现的高性能分布式限流库，提供了三种主流限流算法的实现。该项目特别注重性能优化和分布式场景支持，可以轻松应对高并发环境下的限流需求。ThrottleX 根据定义的策略（如固定窗口、滑动窗口和令牌桶）限制可以到达后端（无论是 Web 服务器、API 等）的请求数量，从而管理请求流。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/ThrottleX","author":[{"@type":"Person","name":"mainJayLai"}]}},{"title":"Go语言的内存镇流器","date":"2024-10-17T00:00:00.000Z","tags":["backend","go"],"draft":false,"summary":"我们通过引入内存镇流器减少了Go应用程序的垃圾回收（GC）周期频率，从而改善了API响应时间。这种做法允许堆在更大范围内增长，减少了GC辅助延迟，而镇流器的虚拟内存分配几乎不消耗实际RAM。相比调整GOGC值，使用镇流器更易于推理与管理。最后，深入分析性能瓶颈是提高应用效率的关键。","layout":"PostSimple","type":"Blog","readingTime":{"text":"27 min read","minutes":26.45,"time":1587000,"words":5290},"slug":"go/memory-ballast","path":"blog/go/memory-ballast","filePath":"blog/go/memory-ballast.mdx","toc":[{"value":"背景介绍","url":"#背景介绍","depth":2},{"value":"挑战与应对","url":"#挑战与应对","depth":2},{"value":"方案调研","url":"#方案调研","depth":2},{"value":"什么是垃圾收集器（GC）？","url":"#什么是垃圾收集器gc","depth":2},{"value":"Go的垃圾收集器","url":"#go的垃圾收集器","depth":2},{"value":"标记和清除阶段","url":"#标记和清除阶段","depth":3},{"value":"关键术语","url":"#关键术语","depth":3},{"value":"标记阶段与性能的关系","url":"#标记阶段与性能的关系","depth":3},{"value":"Visage应用程序中的实际问题","url":"#visage应用程序中的实际问题","depth":3},{"value":"Pacer（步调控制器）","url":"#pacer步调控制器","depth":2},{"value":"引入内存镇流器（Ballast）","url":"#引入内存镇流器ballast","depth":3},{"value":"解释","url":"#解释","depth":3},{"value":"1. 为什么使用内存镇流器？","url":"#1-为什么使用内存镇流器","depth":4},{"value":"2. 这不会浪费10 GiB的物理内存吗？","url":"#2-这不会浪费10-gib的物理内存吗","depth":4},{"value":"API延迟","url":"#api延迟","depth":2},{"value":"GC assists","url":"#gc-assists","depth":3},{"value":"API延迟的影响","url":"#api延迟的影响","depth":4},{"value":"总结","url":"#总结-6","depth":2},{"value":"一些最后的思考","url":"#一些最后的思考","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Go语言的内存镇流器","datePublished":"2024-10-17T00:00:00.000Z","dateModified":"2024-10-17T00:00:00.000Z","description":"我们通过引入内存镇流器减少了Go应用程序的垃圾回收（GC）周期频率，从而改善了API响应时间。这种做法允许堆在更大范围内增长，减少了GC辅助延迟，而镇流器的虚拟内存分配几乎不消耗实际RAM。相比调整GOGC值，使用镇流器更易于推理与管理。最后，深入分析性能瓶颈是提高应用效率的关键。","image":"https://pngimg.com/uploads/github/github_PNG80.png","url":"https://blog.mainjay.cloudns.ch/blog/go/memory-ballast","author":[{"@type":"Person","name":"mainJayLai"}]}}],"title":"Go"}]],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"go"}],["$","meta","3",{"name":"description","content":"A blog created with Next.js and Tailwind.css by MainJayLai"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/tags/go"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/tags/go/feed.xml"}],["$","meta","8",{"property":"og:title","content":"go"}],["$","meta","9",{"property":"og:description","content":"MainJayLai Blog go tagged content"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/tags/go"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"website"}],["$","meta","15",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","16",{"name":"twitter:title","content":"go"}],["$","meta","17",{"name":"twitter:description","content":"MainJayLai Blog go tagged content"}],["$","meta","18",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","19",{"name":"next-size-adjust"}]]
1:null
