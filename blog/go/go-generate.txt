3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],""]
a:I[8173,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["slug","go/go-generate","c"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["blog",{"children":[["slug","go/go-generate","c"],{"children":["__PAGE__?{\"slug\":[\"go\",\"go-generate\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","go/go-generate","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a9b9096fa657c0d0.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
11:I[4347,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
12:I[408,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
13:I[9629,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
2:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Go Generate 完全指南\",\"datePublished\":\"2024-11-25T00:00:00.000Z\",\"dateModified\":\"2024-11-25T00:00:00.000Z\",\"description\":\"Go 的代码生成功能虽然简单，但非常强大和实用。通过 go generate 命令，我们可以实现自动化重复性代码的生成，实现类似泛型功能（在 Go 1.18 之前特别有用），生成高效的查找表和常量，自动化字符串表示的生成，集成各种代码生成工具。通过正确使用这些功能，我们可以大大提高 Go 开发的效率和代码质量。\",\"image\":\"https://pngimg.com/uploads/github/github_PNG80.png\",\"url\":\"https://blog.mainjay.cloudns.ch/blog/go/go-generate\",\"author\":[{\"@type\":\"Person\",\"name\":\"mainJayLai\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L11",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","div",null,{"className":"beautiful-chinese-title","children":["$","h1",null,{"className":"text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14","children":"Go Generate 完全指南"}]}],["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base font-medium leading-6 text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2024-11-25T00:00:00.000Z","children":"November 25, 2024"}]}]]}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0","children":[["$","div",null,{"className":"divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0","children":["$","div",null,{"className":"beautiful-chinese-content prose max-w-none pb-8 pt-10 dark:prose-invert","children":[["$","p",null,{"children":["开发者总是倾向于自动化重复性任务，这同样适用于编写代码。因此，",["$","strong",null,{"children":"元编程(metaprogramming)"}]," 一直是开发和研究的热门领域，可以追溯到 1960 年代的 Lisp。元编程中特别有用的一个方面是代码生成，即编写能够生成其他程序或自身部分的程序。支持宏的语言内置了这种能力；其他语言则通过扩展现有特性来支持这一点(例如 C++ 模板元编程)。"]}],["$","p",null,{"children":"虽然 Go 没有宏或其他形式的元编程，但作为一门实用的语言，它通过官方工具链支持代码生成。"}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"go generate"}]," 命令早在 Go 1.4 就已引入，此后在 Go 生态系统中被广泛使用。Go 项目本身在数十个地方都依赖于 ",["$","code",null,{"className":"custom-code","children":"go generate"}],"；我将在后面简要概述这些用例。"]}],["$","h2",null,{"className":"content-header","id":"基础知识","children":[["$","a",null,{"href":"#基础知识","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"基础知识"]}],["$","p",null,{"children":["让我们从一些术语开始。",["$","code",null,{"className":"custom-code","children":"go generate"}]," 的工作方式是在三个主要角色之间进行协调："]}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"生成器(Generator)"}],": 是由 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 调用的程序或脚本。在任何给定的项目中，可以调用多个生成器，单个生成器也可以被多次调用等。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"魔法注释(Magic comments)"}],": 是在 ",["$","code",null,{"className":"custom-code","children":".go"}]," 文件中以特殊方式格式化的注释，用于指定要调用哪个生成器以及如何调用。任何在行首以 ",["$","code",null,{"className":"custom-code","children":"//go:generate"}]," 开头的注释都符合条件。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"go generate"}],": 是 Go 工具，它读取 Go 源文件，查找并解析魔法注释，然后按照指定运行生成器。"]}]}]]}],["$","p",null,{"children":["非常重要的是要强调，以上就是 Go 为代码生成提供的全部自动化内容。对于其他任何事情，开发者都可以自由使用任何适合他们的工作流程。例如，",["$","code",null,{"className":"custom-code","children":"go generate"}]," 应该始终由开发者手动运行；它永远不会自动调用(比如作为 ",["$","code",null,{"className":"custom-code","children":"go build"}]," 的一部分)。此外，由于我们通常将二进制文件发送给用户或执行环境，所以大家都理解 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 仅在开发期间运行(可能就在运行 ",["$","code",null,{"className":"custom-code","children":"go build"}]," 之前)；Go 程序的用户不应该知道代码的哪些部分是生成的以及如何生成。"]}],["$","p",null,{"children":["这也适用于shipping模块；",["$","code",null,{"className":"custom-code","children":"go-generate"}],"不会运行导入包的生成器。因此，当一个项目发布时，无论生成的代码是它的一部分，都应该检入并与其余代码一起分发。"]}],["$","h2",null,{"className":"content-header","id":"一个简单的例子","children":[["$","a",null,{"href":"#一个简单的例子","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"一个简单的例子"]}],["$","p",null,{"children":["通过实践来学习是最好的；为此，我创建了几个简单的 Go 项目来帮助说明这篇文章中解释的主题。第一个是 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}],"，这是一个基本的 Go 工具，用于模拟生成器。以下是它的完整源代码："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"package"}]," main\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"fmt\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"os\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"func"}]," ",["$","span",null,{"className":"token function","children":"main"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    fmt",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Printf"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"Running %s go on %s\\n\""}],["$","span",null,{"className":"token punctuation","children":","}]," os",["$","span",null,{"className":"token punctuation","children":"."}],"Args",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":","}]," os",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Getenv"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"GOFILE\""}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["    cwd",["$","span",null,{"className":"token punctuation","children":","}]," err ",["$","span",null,{"className":"token operator","children":":="}]," os",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Getwd"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"if"}]," err ",["$","span",null,{"className":"token operator","children":"!="}]," ",["$","span",null,{"className":"token boolean","children":"nil"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token function","children":"panic"}],["$","span",null,{"className":"token punctuation","children":"("}],"err",["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    fmt",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Printf"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"  cwd = %s\\n\""}],["$","span",null,{"className":"token punctuation","children":","}]," cwd",["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    fmt",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Printf"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"  os.Args = %#v\\n\""}],["$","span",null,{"className":"token punctuation","children":","}]," os",["$","span",null,{"className":"token punctuation","children":"."}],"Args",["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"for"}]," ",["$","span",null,{"className":"token boolean","children":"_"}],["$","span",null,{"className":"token punctuation","children":","}]," ev ",["$","span",null,{"className":"token operator","children":":="}]," ",["$","span",null,{"className":"token keyword","children":"range"}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"GOARCH\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"GOOS\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"GOFILE\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"GOLINE\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"GOPACKAGE\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"DOLLAR\""}],["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        fmt",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Println"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"  \""}],["$","span",null,{"className":"token punctuation","children":","}]," ev",["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"=\""}],["$","span",null,{"className":"token punctuation","children":","}]," os",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"Getenv"}],["$","span",null,{"className":"token punctuation","children":"("}],"ev",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":["这个工具不读取任何代码也不写入任何代码；它所做的就是仔细报告它是如何被调用的。我们稍后会详细介绍。让我们先看另一个项目 —— ",["$","code",null,{"className":"custom-code","children":"mymod"}],"。这是一个包含 3 个文件的示例 Go 模块，分为两个包："]}],["$","$L12",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":"$$ tree\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token builtin class-name","children":"."}],"\n"]}],["$","span",null,{"className":"code-line","children":"├── anotherfile.go\n"}],["$","span",null,{"className":"code-line","children":"├── go.mod\n"}],["$","span",null,{"className":"code-line","children":"├── mymod.go\n"}],["$","span",null,{"className":"code-line","children":"└── mypack\n"}],["$","span",null,{"className":"code-line","children":"    └── mypack.go\n"}]]}]}],["$","p",null,{"children":["这些文件的内容是填充物；重要的是其中的 ",["$","code",null,{"className":"custom-code","children":"go:generate"}]," 魔法注释。让我们看一下 ",["$","code",null,{"className":"custom-code","children":"mypack/mypack.go"}]," 中的示例："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:generate samplegentool arg1 \"multiword arg\""}],"\n"]}]}]}],["$","p",null,{"children":["我们看到它调用了带有一些参数的 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}],"。要使这个调用工作，",["$","code",null,{"className":"custom-code","children":"samplegentool"}]," 应该能在 PATH 中找到。这可以通过在 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}]," 项目中运行 ",["$","code",null,{"className":"custom-code","children":"go build"}]," 来构建二进制文件，然后相应地设置 PATH 来实现。现在，如果我们在 ",["$","code",null,{"className":"custom-code","children":"mymod"}]," 项目的根目录中运行 ",["$","code",null,{"className":"custom-code","children":"go generate ./..."}],"，我们会看到类似这样的输出："]}],["$","$L12",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":["$$ go generate ./",["$","span",null,{"className":"token punctuation","children":".."}],".\n"]}],["$","span",null,{"className":"code-line","children":"Running samplegentool go on anotherfile.go\n"}],["$","span",null,{"className":"code-line","children":["  cwd ",["$","span",null,{"className":"token operator","children":"="}]," /tmp/mymod\n"]}],["$","span",null,{"className":"code-line","children":["  os.Args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],"string",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"samplegentool\""}],", ",["$","span",null,{"className":"token string","children":"\"arg1\""}],", ",["$","span",null,{"className":"token string","children":"\"arg2\""}],", ",["$","span",null,{"className":"token string","children":"\"arg3\""}],", ",["$","span",null,{"className":"token string","children":"\"arg4\""}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOARCH ",["$","span",null,{"className":"token operator","children":"="}]," amd64\n"]}],["$","span",null,{"className":"code-line","children":["   GOOS ",["$","span",null,{"className":"token operator","children":"="}]," linux\n"]}],["$","span",null,{"className":"code-line","children":["   GOFILE ",["$","span",null,{"className":"token operator","children":"="}]," anotherfile.go\n"]}],["$","span",null,{"className":"code-line","children":["   GOLINE ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"1"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOPACKAGE ",["$","span",null,{"className":"token operator","children":"="}]," mymod\n"]}],["$","span",null,{"className":"code-line","children":["   DOLLAR ",["$","span",null,{"className":"token operator","children":"="}]," $\n"]}],["$","span",null,{"className":"code-line","children":"Running samplegentool go on mymod.go\n"}],["$","span",null,{"className":"code-line","children":["  cwd ",["$","span",null,{"className":"token operator","children":"="}]," /tmp/mymod\n"]}],["$","span",null,{"className":"code-line","children":["  os.Args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],"string",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"samplegentool\""}],", ",["$","span",null,{"className":"token string","children":"\"arg1\""}],", ",["$","span",null,{"className":"token string","children":"\"arg2\""}],", ",["$","span",null,{"className":"token string","children":"\"-flag\""}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOARCH ",["$","span",null,{"className":"token operator","children":"="}]," amd64\n"]}],["$","span",null,{"className":"code-line","children":["   GOOS ",["$","span",null,{"className":"token operator","children":"="}]," linux\n"]}],["$","span",null,{"className":"code-line","children":["   GOFILE ",["$","span",null,{"className":"token operator","children":"="}]," mymod.go\n"]}],["$","span",null,{"className":"code-line","children":["   GOLINE ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOPACKAGE ",["$","span",null,{"className":"token operator","children":"="}]," mymod\n"]}],["$","span",null,{"className":"code-line","children":["   DOLLAR ",["$","span",null,{"className":"token operator","children":"="}]," $\n"]}],["$","span",null,{"className":"code-line","children":"Running samplegentool go on mypack.go\n"}],["$","span",null,{"className":"code-line","children":["  cwd ",["$","span",null,{"className":"token operator","children":"="}]," /tmp/mymod/mypack\n"]}],["$","span",null,{"className":"code-line","children":["  os.Args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],"string",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"samplegentool\""}],", ",["$","span",null,{"className":"token string","children":"\"arg1\""}],", ",["$","span",null,{"className":"token string","children":"\"multiword arg\""}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOARCH ",["$","span",null,{"className":"token operator","children":"="}]," amd64\n"]}],["$","span",null,{"className":"code-line","children":["   GOOS ",["$","span",null,{"className":"token operator","children":"="}]," linux\n"]}],["$","span",null,{"className":"code-line","children":["   GOFILE ",["$","span",null,{"className":"token operator","children":"="}]," mypack.go\n"]}],["$","span",null,{"className":"code-line","children":["   GOLINE ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOPACKAGE ",["$","span",null,{"className":"token operator","children":"="}]," mypack\n"]}],["$","span",null,{"className":"code-line","children":["   DOLLAR ",["$","span",null,{"className":"token operator","children":"="}]," $\n"]}]]}]}],["$","p",null,{"children":["首先，注意 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}]," 会在每个包含魔法注释的文件中被调用；由于我们使用 ",["$","code",null,{"className":"custom-code","children":"./..."}]," 模式运行 ",["$","code",null,{"className":"custom-code","children":"go generate"}],"，这包括子目录。这对于在各个地方都有多个生成器的大型项目来说非常方便。"]}],["$","p",null,{"children":"输出中有很多有趣的内容；让我们逐行分析："}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"cwd"}]," 报告了 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}]," 被调用时的工作目录。这总是找到带有魔法注释的文件的目录；这是由 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 保证的，让生成器知道它在目录树中的位置。"]}],["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"os.Args"}]," 报告传递给生成器的命令行参数。如上面的输出所示，这包括标志以及由引号括起的多字参数。"]}],["$","li",null,{"children":["然后打印出传递给生成器的环境变量；完整说明请参见",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://pkg.go.dev/cmd/go#hdr-Generate_Go_files_by_processing_source","children":"官方文档"}],"。这里最有趣的环境变量是 ",["$","code",null,{"className":"custom-code","children":"GOFILE"}],"，它指定了找到魔法注释的文件名(这个路径相对于工作目录)，以及 ",["$","code",null,{"className":"custom-code","children":"GOPACKAGE"}],"，它告诉生成器这个文件属于哪个包。"]}]]}],["$","h2",null,{"className":"content-header","id":"生成器能做什么","children":[["$","a",null,{"href":"#生成器能做什么","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"生成器能做什么？"]}],["$","p",null,{"children":["现在我们对生成器如何被 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 调用有了很好的理解，它们能做什么呢？事实上，它们可以做任何我们想做的事。确实如此。毕竟，生成器只是计算机程序。如前所述，生成的文件通常也会检入到源代码中，所以生成器可能只需要很少运行。在许多项目中，开发者不会像我在上面的例子中那样从根目录运行 ",["$","code",null,{"className":"custom-code","children":"go generate ./..."}],"；相反，他们只会根据需要在特定目录中运行特定的生成器。"]}],["$","p",null,{"children":["在下一节中，我将深入介绍一个非常流行的生成器 - ",["$","code",null,{"className":"custom-code","children":"stringer"}]," 工具。在此期间，这里列举了 Go 项目本身使用生成器的一些任务（这不是完整列表；所有用途都可以通过在 Go 源码树中搜索 ",["$","code",null,{"className":"custom-code","children":"go:generate"}]," 找到）："]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"gob"}]," 包使用生成器来生成用于编码/解码数据的重复性辅助函数。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"math/bits"}]," 包使用生成器为其提供的一些位运算生成快速查找表。"]}],["$","li",null,{"children":["几个",["$","strong",null,{"children":"加密包"}],"使用生成器来生成哈希函数洗牌模式和某些操作的重复性汇编代码。"]}],["$","li",null,{"children":"一些加密包还使用生成器从特定 HTTP URL 获取证书。显然，这些不需要经常运行..."}],["$","li",null,{"children":[["$","strong",null,{"children":"net/http"}]," 使用生成器来生成各种 HTTP 常量。"]}],["$","li",null,{"children":"在 Go 运行时的源代码中有几个有趣的生成器用途，如为各种任务生成汇编代码、数学运算的查找表等。"}],["$","li",null,{"children":"Go 编译器实现使用生成器为 IR 节点生成重复性类型和方法。"}]]}],["$","p",null,{"children":["此外，在标准库中至少有两个地方使用生成器来实现类似泛型的功能，其中几乎重复的代码是从具有不同类型的现有代码生成的。一个地方是 ",["$","strong",null,{"children":"sort"}]," 包，另一个是 ",["$","strong",null,{"children":"suffixarray"}]," 包。"]}],["$","h2",null,{"className":"content-header","id":"生成器深入探讨stringer","children":[["$","a",null,{"href":"#生成器深入探讨stringer","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"生成器深入探讨：stringer"]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"stringer"}]," 是 Go 项目中最常用的生成器之一，它可以自动为类型创建 ",["$","code",null,{"className":"custom-code","children":"String()"}]," 方法，使其实现 ",["$","code",null,{"className":"custom-code","children":"fmt.Stringer"}]," 接口。它最常用于为枚举生成文本表示。"]}],["$","p",null,{"children":["让我们看一个来自标准库（",["$","code",null,{"className":"custom-code","children":"math.big"}]," 包）的例子；具体来说，是 ",["$","code",null,{"className":"custom-code","children":"RoundingMode"}]," 类型，它的定义如下："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"type"}]," RoundingMode ",["$","span",null,{"className":"token builtin","children":"byte"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ToNearestEven RoundingMode ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token boolean","children":"iota"}],"\n"]}],["$","span",null,{"className":"code-line","children":"    ToNearestAway\n"}],["$","span",null,{"className":"code-line","children":"    ToZero\n"}],["$","span",null,{"className":"code-line","children":"    AwayFromZero\n"}],["$","span",null,{"className":"code-line","children":"    ToNegativeInf\n"}],["$","span",null,{"className":"code-line","children":"    ToPositiveInf\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}]]}]}],["$","p",null,{"children":["至少在 Go 1.18 之前，这是一个惯用的 Go 枚举；要使这些枚举值的名称可打印，我们需要为这个类型实现一个 ",["$","code",null,{"className":"custom-code","children":"String()"}]," 方法，该方法将是一种 switch 语句，列举每个值及其字符串表示。这是非常重复性的工作，这就是为什么使用 ",["$","code",null,{"className":"custom-code","children":"stringer"}]," 工具的原因。"]}],["$","p",null,{"children":["我在一个小的示例模块中复制了",["$","code",null,{"className":"custom-code","children":"RoundingMode"}],"类型及其值，这样我们就可以更容易地对生成器进行实验。让我们在文件中添加适当的魔术注释："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:generate stringer -type=RoundingMode"}],"\n"]}]}]}],["$","p",null,{"children":["我们稍后会讨论 ",["$","code",null,{"className":"custom-code","children":"stringer"}]," 接受的标志。首先确保安装它："]}],["$","$L12",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":["$","span",null,{"className":"code-line","children":["$$ go ",["$","span",null,{"className":"token function","children":"install"}]," golang.org/x/tools/cmd/stringer@latest\n"]}]}]}],["$","p",null,{"children":["现在我们可以运行 ",["$","code",null,{"className":"custom-code","children":"go generate"}],"；由于在示例项目中包含魔法注释的文件位于子包中，我将从模块根目录运行："]}],["$","$L12",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":["$","span",null,{"className":"code-line","children":["$$ go generate ./",["$","span",null,{"className":"token punctuation","children":".."}],".\n"]}]}]}],["$","p",null,{"children":["如果一切设置正确，此命令将成功完成，没有任何标准输出。检查项目内容，你会发现生成了一个名为 ",["$","code",null,{"className":"custom-code","children":"roundingmode_string.go"}]," 的文件，内容如下："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Code generated by \"stringer -type=RoundingMode\"; DO NOT EDIT."}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"package"}]," float\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," ",["$","span",null,{"className":"token string","children":"\"strconv\""}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"func"}]," ",["$","span",null,{"className":"token boolean","children":"_"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// An \"invalid array index\" compiler error signifies that the constant values have changed."}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// Re-run the stringer command to generate them again."}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"var"}]," x ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token keyword","children":"struct"}],["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token boolean","children":"_"}]," ",["$","span",null,{"className":"token operator","children":"="}]," x",["$","span",null,{"className":"token punctuation","children":"["}],"ToNearestEven",["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token boolean","children":"_"}]," ",["$","span",null,{"className":"token operator","children":"="}]," x",["$","span",null,{"className":"token punctuation","children":"["}],"ToNearestAway",["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token boolean","children":"_"}]," ",["$","span",null,{"className":"token operator","children":"="}]," x",["$","span",null,{"className":"token punctuation","children":"["}],"ToZero",["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token boolean","children":"_"}]," ",["$","span",null,{"className":"token operator","children":"="}]," x",["$","span",null,{"className":"token punctuation","children":"["}],"AwayFromZero",["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"3"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token boolean","children":"_"}]," ",["$","span",null,{"className":"token operator","children":"="}]," x",["$","span",null,{"className":"token punctuation","children":"["}],"ToNegativeInf",["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"4"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token boolean","children":"_"}]," ",["$","span",null,{"className":"token operator","children":"="}]," x",["$","span",null,{"className":"token punctuation","children":"["}],"ToPositiveInf",["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"5"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," _RoundingMode_name ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"\"ToNearestEvenToNearestAwayToZeroAwayFromZeroToNegativeInfToPositiveInf\""}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"var"}]," _RoundingMode_index ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token operator","children":"..."}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token builtin","children":"uint8"}],["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"13"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"26"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"32"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"44"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"57"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"70"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"func"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"i RoundingMode",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token function","children":"String"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"if"}]," i ",["$","span",null,{"className":"token operator","children":">="}]," ",["$","span",null,{"className":"token function","children":"RoundingMode"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token function","children":"len"}],["$","span",null,{"className":"token punctuation","children":"("}],"_RoundingMode_index",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token keyword","children":"return"}]," ",["$","span",null,{"className":"token string","children":"\"RoundingMode(\""}]," ",["$","span",null,{"className":"token operator","children":"+"}]," strconv",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"FormatInt"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token function","children":"int64"}],["$","span",null,{"className":"token punctuation","children":"("}],"i",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token number","children":"10"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"+"}]," ",["$","span",null,{"className":"token string","children":"\")\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"return"}]," _RoundingMode_name",["$","span",null,{"className":"token punctuation","children":"["}],"_RoundingMode_index",["$","span",null,{"className":"token punctuation","children":"["}],"i",["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":":"}],"_RoundingMode_index",["$","span",null,{"className":"token punctuation","children":"["}],"i",["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"stringer"}]," 工具有多种代码生成策略，取决于它所调用的枚举值的性质。我们的情况是最简单的一种，具有\"单个连续运行\"的值。如果值形成多个连续运行，",["$","code",null,{"className":"custom-code","children":"stringer"}]," 将生成稍微不同的代码，如果值根本不形成运行，则会生成另一个版本。"]}],["$","p",null,{"children":["首先，",["$","code",null,{"className":"custom-code","children":"_RoundingMode_name"}]," 常量用于在单个连续字符串中有效保存所有字符串表示。",["$","code",null,{"className":"custom-code","children":"_RoundingMode_index"}]," 作为此字符串的查找表；例如，让我们看看 ",["$","code",null,{"className":"custom-code","children":"ToZero"}],"，它的值为 2。",["$","code",null,{"className":"custom-code","children":"_RoundingMode_index[2]"}]," 是 26，所以代码将在索引 26 处索引到 ",["$","code",null,{"className":"custom-code","children":"_RoundingMode_name"}],"，这将引导我们到 ",["$","code",null,{"className":"custom-code","children":"ToZero"}]," 部分（结束是下一个索引，在这种情况下是 32）。"]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"String()"}]," 中的代码还有一个后备方案，以防添加了更多枚举值但未重新运行 ",["$","code",null,{"className":"custom-code","children":"stringer"}]," 工具。在这种情况下，生成的值将是 ",["$","code",null,{"className":"custom-code","children":"RoundingMode(N)"}],"，其中 N 是数值。"]}],["$","p",null,{"children":["在Go的工具链中，没有任何机制保证生成的代码与源代码保持同步；",["$","strong",null,{"children":"运行代码生成器完全是开发者的责任"}],"，因此提供一些额外的防护机制是非常有用的。"]}],["$","p",null,{"children":["$","strong",null,{"children":["关于",["$","code",null,{"className":"custom-code","children":"func _()"}],"中的奇怪代码"]}]}],["$","p",null,{"children":["首先，注意到这个函数实际上",["$","strong",null,{"children":"什么都没有编译出来"}],"：它既没有返回值，也没有副作用，并且不会被调用。这个函数的目的在于作为一个",["$","strong",null,{"children":"编译时保护机制"}],"。当原始的枚举发生了不兼容的更改，而开发者忘记重新运行",["$","code",null,{"className":"custom-code","children":"go generate"}],"时，这段代码会作为最后一道防线。"]}],["$","p",null,{"children":["具体来说，它的作用是防止现有的枚举值被修改。在这种情况下，如果没有重新运行",["$","code",null,{"className":"custom-code","children":"go generate"}],"，虽然",["$","code",null,{"className":"custom-code","children":"String()"}],"方法可能仍然可以调用，但会返回完全错误的值。而",["$","strong",null,{"children":"编译时保护机制"}],"会尝试捕获这种情况，通过触发",["$","strong",null,{"children":"超出数组边界的编译错误"}],"来强制开发者发现问题。"]}],["$","p",null,{"children":["关于",["$","code",null,{"className":"custom-code","children":"stringer"}],"工具的工作原理，让我们从阅读它的帮助信息开始："]}],["$","$L12",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":["$$ stringer ",["$","span",null,{"className":"token parameter variable","children":"-help"}],"\n"]}],["$","span",null,{"className":"code-line","children":"Usage of stringer:\n"}],["$","span",null,{"className":"code-line","children":["  stringer ",["$","span",null,{"className":"token punctuation","children":"["}],"flags",["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token parameter variable","children":"-type"}]," T ",["$","span",null,{"className":"token punctuation","children":"["}],"directory",["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  stringer ",["$","span",null,{"className":"token punctuation","children":"["}],"flags",["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token parameter variable","children":"-type"}]," T files",["$","span",null,{"className":"token punctuation","children":".."}],". ",["$","span",null,{"className":"token comment","children":"# Must be a single package"}],"\n"]}],["$","span",null,{"className":"code-line","children":["For ",["$","span",null,{"className":"token function","children":"more"}]," information, see:\n"]}],["$","span",null,{"className":"code-line","children":"  https://pkg.go.dev/golang.org/x/tools/cmd/stringer\n"}],["$","span",null,{"className":"code-line","children":"Flags:\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token parameter variable","children":"-linecomment"}],"\n"]}],["$","span",null,{"className":"code-line","children":"      use line comment text as printed text when present\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token parameter variable","children":"-output"}]," string\n"]}],["$","span",null,{"className":"code-line","children":["      output ",["$","span",null,{"className":"token function","children":"file"}]," name",["$","span",null,{"className":"token punctuation","children":";"}]," default srcdir/",["$","span",null,{"className":"token operator","children":"<"}],"type",["$","span",null,{"className":"token operator","children":">"}],"_string.go\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token parameter variable","children":"-tags"}]," string\n"]}],["$","span",null,{"className":"code-line","children":"      comma-separated list of build tags to apply\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token parameter variable","children":"-trimprefix"}]," prefix\n"]}],["$","span",null,{"className":"code-line","children":"      trim the prefix from the generated constant names\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token parameter variable","children":"-type"}]," string\n"]}],["$","span",null,{"className":"code-line","children":["      comma-separated list of ",["$","span",null,{"className":"token builtin class-name","children":"type"}]," names",["$","span",null,{"className":"token punctuation","children":";"}]," must be ",["$","span",null,{"className":"token builtin class-name","children":"set"}],"\n"]}]]}]}],["$","p",null,{"children":["我们使用了",["$","code",null,{"className":"custom-code","children":"-type"}],"参数来告诉",["$","code",null,{"className":"custom-code","children":"stringer"}],"需要为哪些类型生成",["$","code",null,{"className":"custom-code","children":"String()"}],"方法。在一个真实的代码库中，可能会有多个定义的类型，但我们通常只希望为",["$","strong",null,{"children":"特定类型"}],"生成这些方法。"]}],["$","p",null,{"children":["在这个例子中，我们没有指定",["$","code",null,{"className":"custom-code","children":"-output"}],"参数，因此默认生成的文件名为",["$","code",null,{"className":"custom-code","children":"roundingmode_string.go"}],"。"]}],["$","p",null,{"children":["细心的读者可能会注意到，当我们调用",["$","code",null,{"className":"custom-code","children":"stringer"}],"时，",["$","strong",null,{"children":"并没有显式指定输入文件"}],"。快速查看",["$","code",null,{"className":"custom-code","children":"stringer"}],"的源码发现，它也不会使用",["$","code",null,{"className":"custom-code","children":"GOFILE"}],"环境变量。那么，它是如何知道应该分析哪些文件的呢？实际上，",["$","code",null,{"className":"custom-code","children":"stringer"}],"使用",["$","code",null,{"className":"custom-code","children":"golang.org/x/tools/go/packages"}],"来加载当前工作目录中的整个包。换句话说，无论带有",["$","strong",null,{"children":"魔法注释"}],"的文件在哪个位置，",["$","code",null,{"className":"custom-code","children":"stringer"}],"默认会分析整个包。这非常合理，因为Go语言中，",["$","strong",null,{"children":"文件只是代码的容器"}],"，而",["$","strong",null,{"children":"包才是工具链真正关心的输入单位"}],"。例如，常量定义并不一定非要与类型声明位于同一个文件中。"]}],["$","h2",null,{"className":"content-header","id":"源码生成器和构建标签","children":[["$","a",null,{"href":"#源码生成器和构建标签","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"源码生成器和构建标签"]}],["$","p",null,{"children":["到目前为止，我们假设生成器在运行 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 时位于 PATH 中，但情况可能并非总是如此。"]}],["$","p",null,{"children":["考虑一个非常常见的场景，你的模块有自己的生成器，它只对这个特定模块有用。当有人在该模块上工作时，你希望他们能够克隆代码，运行 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 和 ",["$","code",null,{"className":"custom-code","children":"go build"}]," 等。但是，如果魔法注释假设生成器总是在 PATH 中，这将不起作用，除非在运行 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 之前构建生成器并正确指向它们。"]}],["$","p",null,{"children":["在 Go 中，解决方案很简单，因为 ",["$","code",null,{"className":"custom-code","children":"go run"}]," 非常适合运行只是模块树中某处的 ",["$","code",null,{"className":"custom-code","children":".go"}]," 文件的生成器。这是一个带有魔法注释的包文件示例："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"package"}]," mypack\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:generate go run gen.go arg1 arg2"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"func"}]," ",["$","span",null,{"className":"token function","children":"PackFunc"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token builtin","children":"string"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"return"}]," ",["$","span",null,{"className":"token string","children":"\"insourcegenerator/mypack.PackFunc\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":["注意这里如何调用生成器：使用 ",["$","code",null,{"className":"custom-code","children":"go run gen.go"}],"。这意味着 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 将期望在包含魔法注释的文件的同一目录中找到 ",["$","code",null,{"className":"custom-code","children":"gen.go"}],"。",["$","code",null,{"className":"custom-code","children":"gen.go"}]," 的内容是："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:build ignore"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"package"}]," main\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"fmt\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token string","children":"\"os\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"func"}]," ",["$","span",null,{"className":"token function","children":"main"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// ... same main() as the simple example at the top of the post"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":["这只是一个小型 Go 程序（在 ",["$","code",null,{"className":"custom-code","children":"package main"}]," 中）。唯一值得注意的是 ",["$","code",null,{"className":"custom-code","children":"//go:build"}]," 约束，它告诉 Go 工具链在构建项目时忽略此文件。确实，",["$","code",null,{"className":"custom-code","children":"gen.go"}]," 不是包的一部分；它本身就在 ",["$","code",null,{"className":"custom-code","children":"package main"}]," 中，并且旨在与 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 一起运行，而不是编译到包中。"]}],["$","p",null,{"children":["标准库中有许多使用 ",["$","code",null,{"className":"custom-code","children":"go run"}]," 调用的小程序作为生成器的例子。"]}],["$","p",null,{"children":"典型的模式是涉及 3 个文件进行代码生成，这些文件都位于同一目录/包中："}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"源文件"}],"：包含包的一些代码，以及使用 ",["$","code",null,{"className":"custom-code","children":"go run"}]," 调用生成器的魔法注释。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"生成器"}],"：一个带有 ",["$","code",null,{"className":"custom-code","children":"package main"}]," 的单个 ",["$","code",null,{"className":"custom-code","children":".go"}]," 文件；此生成器由源文件中的魔法注释中的 ",["$","code",null,{"className":"custom-code","children":"go run"}]," 调用以生成生成的文件。生成器 ",["$","code",null,{"className":"custom-code","children":".go"}]," 文件通常会有 ",["$","code",null,{"className":"custom-code","children":"//go:build ignore"}]," 约束，以将其从包本身的构建中排除。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"生成的文件"}],"：由生成器生成；在某些约定中，它会与源文件同名，但后面跟着 ",["$","code",null,{"className":"custom-code","children":"_gen"}],"（如 ",["$","code",null,{"className":"custom-code","children":"pack.go"}]," --> ",["$","code",null,{"className":"custom-code","children":"pack_gen.go"}],"）；或者它可能是某种前缀（如 ",["$","code",null,{"className":"custom-code","children":"gen"}],"）。生成的文件中的代码与源文件中的代码在同一个包中。在许多情况下，生成的文件包含一些作为未导出符号的实现细节；源文件可以在其代码中引用这些，因为两个文件在同一个包中。"]}]]}],["$","p",null,{"children":"当然，这些都不是工具强制要求的 - 它只是描述了一个常见的约定；特定项目可以以不同的方式设置（例如，一个生成器为多个包生成代码）。"}],["$","h2",null,{"className":"content-header","id":"高级特性","children":[["$","a",null,{"href":"#高级特性","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"高级特性"]}],["$","p",null,{"children":["本节讨论 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 的一些高级或较少使用的特性。"]}],["$","h3",null,{"className":"content-header","id":"-command-标志","children":[["$","a",null,{"href":"#-command-标志","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],["$","code",null,{"className":"custom-code","children":"-command"}]," 标志"]}],["$","p",null,{"children":["此标志让我们可以为 ",["$","code",null,{"className":"custom-code","children":"go:generate"}]," 行定义别名；如果某个生成器是一个多词命令，我们想为多次调用缩短它，这可能会很有用。"]}],["$","p",null,{"children":["原始动机可能是通过以下方式将 ",["$","code",null,{"className":"custom-code","children":"go tool yacc"}]," 缩短为 ",["$","code",null,{"className":"custom-code","children":"yacc"}],"："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:generate -command yacc go tool yacc"}],"\n"]}]}]}],["$","p",null,{"children":["之后就可以用这个 4 个字母的名称而不是三个单词多次调用 ",["$","code",null,{"className":"custom-code","children":"yacc"}],"。"]}],["$","p",null,{"children":["有趣的是，",["$","code",null,{"className":"custom-code","children":"go tool yacc"}]," 在 1.8 版本中从 Go 核心工具链中移除了，我在主 Go 仓库（除了测试 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 本身）或 x/tools 模块中都没有找到 ",["$","code",null,{"className":"custom-code","children":"-command"}]," 的使用。"]}],["$","h3",null,{"className":"content-header","id":"-run-标志","children":[["$","a",null,{"href":"#-run-标志","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],["$","code",null,{"className":"custom-code","children":"-run"}]," 标志"]}],["$","p",null,{"children":["这个标志是给 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 命令本身使用的，用于选择要运行哪些生成器。回想我们的简单示例，我们在同一个项目中有 3 个 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}]," 的调用。我们可以用 ",["$","code",null,{"className":"custom-code","children":"-run"}]," 标志只选择其中一个运行："]}],["$","$L12",null,{"className":"language-bash","children":["$","code",null,{"className":"code-highlight language-bash","children":[["$","span",null,{"className":"code-line","children":["$$ go generate ",["$","span",null,{"className":"token parameter variable","children":"-run"}]," multi ./",["$","span",null,{"className":"token punctuation","children":".."}],".\n"]}],["$","span",null,{"className":"code-line","children":"Running samplegentool go on mypack.go\n"}],["$","span",null,{"className":"code-line","children":["  cwd ",["$","span",null,{"className":"token operator","children":"="}]," /tmp/mymod/mypack\n"]}],["$","span",null,{"className":"code-line","children":["  os.Args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],"string",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"samplegentool\""}],", ",["$","span",null,{"className":"token string","children":"\"arg1\""}],", ",["$","span",null,{"className":"token string","children":"\"multiword arg\""}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOARCH ",["$","span",null,{"className":"token operator","children":"="}]," amd64\n"]}],["$","span",null,{"className":"code-line","children":["   GOOS ",["$","span",null,{"className":"token operator","children":"="}]," linux\n"]}],["$","span",null,{"className":"code-line","children":["   GOFILE ",["$","span",null,{"className":"token operator","children":"="}]," mypack.go\n"]}],["$","span",null,{"className":"code-line","children":["   GOLINE ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   GOPACKAGE ",["$","span",null,{"className":"token operator","children":"="}]," mypack\n"]}],["$","span",null,{"className":"code-line","children":["   DOLLAR ",["$","span",null,{"className":"token operator","children":"="}]," $\n"]}]]}]}],["$","p",null,{"children":"这个功能的实用性应该很明显：在一个有多个生成器的大型项目中，我们经常只想运行其中的一部分用于调试或快速编辑-运行循环的目的。"}],["$","h3",null,{"className":"content-header","id":"dollar-环境变量","children":[["$","a",null,{"href":"#dollar-环境变量","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"DOLLAR 环境变量"]}],["$","p",null,{"children":["在自动传递给生成器的环境变量中，有一个特别突出 - ",["$","code",null,{"className":"custom-code","children":"DOLLAR"}],"。它是做什么的？为什么要为一个字符专门设置一个环境变量？在 Go 源代码树中没有使用这个环境变量。"]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"DOLLAR"}]," 的起源可以追溯到 Rob Pike 的一个提交。正如变更描述所说，这里的动机是在不需要复杂的 shell 转义的情况下将 ",["$","code",null,{"className":"custom-code","children":"$$"}]," 字符传递给生成器。如果 ",["$","code",null,{"className":"custom-code","children":"go generate"}]," 调用 shell 脚本或接受正则表达式作为参数的东西，这很有用。"]}],["$","p",null,{"children":["可以通过我们的 ",["$","code",null,{"className":"custom-code","children":"samplegentool"}]," 生成器观察 ",["$","code",null,{"className":"custom-code","children":"DOLLAR"}]," 的效果。如果我们将其中一个魔法注释改为："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:generate samplegentool arg1 $somevar"}],"\n"]}]}]}],["$","p",null,{"children":"生成器报告其参数为："}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":["os",["$","span",null,{"className":"token punctuation","children":"."}],"Args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"samplegentool\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"arg1\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"\""}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}],["$","p",null,{"children":["这是因为 ",["$","code",null,{"className":"custom-code","children":"$$somevar"}]," 被 shell 解释为引用 ",["$","code",null,{"className":"custom-code","children":"somevar"}]," 变量，该变量不存在所以其默认值为空。相反，我们可以这样使用 ",["$","code",null,{"className":"custom-code","children":"DOLLAR"}],"："]}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//go:generate samplegentool arg1 ${DOLLAR}somevar"}],"\n"]}]}]}],["$","p",null,{"children":"然后生成器报告："}],["$","$L12",null,{"className":"language-go","children":["$","code",null,{"className":"language-go code-highlight","children":["$","span",null,{"className":"code-line","children":["os",["$","span",null,{"className":"token punctuation","children":"."}],"Args ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token builtin","children":"string"}],["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token string","children":"\"samplegentool\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"arg1\""}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"\"$somevar\""}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]}]}]]}]}],["$","div",null,{"className":"pb-6 pt-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L13",null,{"slug":"go/go-generate"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/go/postgres-notifier","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Previous post: 基于 Postgres 的通知模式（Notifier Pattern）","children":["← ","基于 Postgres 的通知模式（Notifier Pattern）"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/security/database-password","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Next post: 如何安全地存储密码在数据库","children":["如何安全地存储密码在数据库"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Go Generate 完全指南"}],["$","meta","3",{"name":"description","content":"Go 的代码生成功能虽然简单，但非常强大和实用。通过 go generate 命令，我们可以实现自动化重复性代码的生成，实现类似泛型功能（在 Go 1.18 之前特别有用），生成高效的查找表和常量，自动化字符串表示的生成，集成各种代码生成工具。通过正确使用这些功能，我们可以大大提高 Go 开发的效率和代码质量。"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/blog/go/go-generate"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/feed.xml"}],["$","meta","8",{"property":"og:title","content":"Go Generate 完全指南"}],["$","meta","9",{"property":"og:description","content":"Go 的代码生成功能虽然简单，但非常强大和实用。通过 go generate 命令，我们可以实现自动化重复性代码的生成，实现类似泛型功能（在 Go 1.18 之前特别有用），生成高效的查找表和常量，自动化字符串表示的生成，集成各种代码生成工具。通过正确使用这些功能，我们可以大大提高 Go 开发的效率和代码质量。"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/blog/go/go-generate"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"article"}],["$","meta","15",{"property":"article:published_time","content":"2024-11-25T00:00:00.000Z"}],["$","meta","16",{"property":"article:modified_time","content":"2024-11-25T00:00:00.000Z"}],["$","meta","17",{"property":"article:author","content":"mainJayLai"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"Go Generate 完全指南"}],["$","meta","20",{"name":"twitter:description","content":"Go 的代码生成功能虽然简单，但非常强大和实用。通过 go generate 命令，我们可以实现自动化重复性代码的生成，实现类似泛型功能（在 Go 1.18 之前特别有用），生成高效的查找表和常量，自动化字符串表示的生成，集成各种代码生成工具。通过正确使用这些功能，我们可以大大提高 Go 开发的效率和代码质量。"}],["$","meta","21",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
