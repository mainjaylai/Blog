3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],""]
a:I[8173,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["slug","backend/kafka-rebalancing-automq","c"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["blog",{"children":[["slug","backend/kafka-rebalancing-automq","c"],{"children":["__PAGE__?{\"slug\":[\"backend\",\"kafka-rebalancing-automq\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","backend/kafka-rebalancing-automq","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a9b9096fa657c0d0.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
11:I[4347,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
12:I[9629,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
2:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Kafka 重平衡挑战及 AutoMQ 的解决方案\",\"datePublished\":\"2024-12-02T00:00:00.000Z\",\"dateModified\":\"2024-12-02T00:00:00.000Z\",\"description\":\"文章详细介绍了 Kafka 在重平衡过程中面临的挑战，以及 AutoMQ 如何通过创新的存储计算分离架构来解决这些问题。通过将数据存储在对象存储中，AutoMQ 无需在 broker 间移动数据就能实现重平衡，大大提高了效率。文章还介绍了 AutoMQ 的自平衡组件 AutoBalancer 的工作原理和优势。\",\"image\":\"https://pngimg.com/uploads/github/github_PNG80.png\",\"url\":\"https://blog.mainjay.cloudns.ch/blog/backend/kafka-rebalancing-automq\",\"author\":[{\"@type\":\"Person\",\"name\":\"mainJayLai\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L11",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","div",null,{"className":"beautiful-chinese-title","children":["$","h1",null,{"className":"text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14","children":"Kafka 重平衡挑战及 AutoMQ 的解决方案"}]}],["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base font-medium leading-6 text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2024-12-02T00:00:00.000Z","children":"December 2, 2024"}]}]]}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0","children":[["$","div",null,{"className":"divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0","children":["$","div",null,{"className":"beautiful-chinese-content prose max-w-none pb-8 pt-10 dark:prose-invert","children":[["$","h2",null,{"className":"content-header","id":"引言","children":[["$","a",null,{"href":"#引言","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"引言"]}],["$","p",null,{"children":["如果你曾经在公司管理过 ",["$","strong",null,{"children":"Kafka"}]," 部署，你很可能做过跨集群的分区重组工作。由于 Kafka 采用紧密耦合的计算和存储设置，当集群成员发生变化（比如添加或删除 ",["$","code",null,{"className":"custom-code","children":"broker"}],"）或用户想要在 broker 之间进行负载均衡时，必须在 broker 之间重新分配分区副本，这会导致数据迁移。"]}],["$","p",null,{"children":["Kafka 提供了一个用于处理重分配过程的脚本，但它需要用户干预，且在规划方面需要更强的稳健性。像 ",["$","strong",null,{"children":"Cruise Control"}]," 这样的工具已经介入，基于集群状态提供自动副本平衡，并提供更复杂的重分配计划。"]}],["$","p",null,{"children":["然而，数据迁移的问题仍然存在。本文将探讨 ",["$","strong",null,{"children":"AutoMQ"}]," 如何解决 Kafka 的重平衡挑战。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"AutoMQ"}]," 是一个云原生解决方案，提供 100% 的 Kafka 兼容性，同时将数据完全存储在对象存储上。这种方法提供了一个高成本效益的 Kafka 替代方案，而不会牺牲低延迟和高吞吐量性能。更重要的是，你永远不需要在 broker 之间传输数据。"]}],["$","h2",null,{"className":"content-header","id":"kafka-分区基础","children":[["$","a",null,{"href":"#kafka-分区基础","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"Kafka 分区基础"]}],["$","blockquote",null,{"children":["$","p",null,{"children":"让我首先回顾一下 Kafka 的核心概念："}]}],["$","ul",null,{"children":[["$","li",null,{"children":["Kafka 的数据单位是",["$","strong",null,{"children":"消息"}],"（",["$","code",null,{"className":"custom-code","children":"message"}],"）"]}],["$","li",null,{"children":["消息在 Kafka 中被组织成",["$","strong",null,{"children":"主题"}],"（",["$","code",null,{"className":"custom-code","children":"topic"}],"）"]}],["$","li",null,{"children":"你可以把消息想象成数据库系统中的行，把主题想象成表"}],["$","li",null,{"children":["一个主题被分成多个",["$","strong",null,{"children":"分区"}],"（",["$","code",null,{"className":"custom-code","children":"partition"}],"）"]}]]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture1.webp","alt":"Kafka 分区示意图","width":"558","height":"396"}]}]}],["$","p",null,{"children":["每个主题的分区对应一个逻辑日志。在物理上，日志是由一组大小大致相同的段文件（例如 1GB）实现的。每当一条消息被写入分区时，",["$","code",null,{"className":"custom-code","children":"broker"}]," 就会将该消息追加到最后一个段文件中。"]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture2.webp","alt":"Kafka 日志结构","width":"532","height":"472"}]}]}],["$","p",null,{"children":"为了确保数据的持久性和可用性，分区被复制到可配置数量的 broker（副本因子）。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture3.webp","alt":"Kafka 副本分布","width":"460","height":"490"}]}]}],["$","p",null,{"children":["这有助于在 broker 发生故障时自动故障转移副本，确保消息在出现故障时仍然可用。每个 Kafka 分区通常有一个",["$","strong",null,{"children":"主副本"}],"（",["$","code",null,{"className":"custom-code","children":"leader"}],"）和零个或多个",["$","strong",null,{"children":"从副本"}],"（",["$","code",null,{"className":"custom-code","children":"follower"}],"）。所有写入操作必须送到分区的主副本，而读取操作可以由主副本或分区的从副本提供服务。"]}],["$","p",null,{"children":"Kafka 会以轮询方式在集群中分配分区副本，以避免将高流量主题的所有分区放在少数节点上。"}],["$","h2",null,{"className":"content-header","id":"副本重分配在-kafka-中","children":[["$","a",null,{"href":"#副本重分配在-kafka-中","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"副本重分配在 Kafka 中"]}],["$","p",null,{"children":"考虑到副本是分布在整个集群中的，当现有的 broker 宕机或添加新的 broker 时会发生什么？Kafka 副本需要重新分配。假设我们有三个 broker 和两个分区，每个分区有两个副本："}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture4.webp","alt":"Kafka 副本重分配示例","width":"388","height":"450"}]}]}],["$","p",null,{"children":"如果一个 broker 发生故障，Kafka 会自动将该 broker 作为 leader 的所有分区的领导权重新分配给持有副本的其他 broker。Kafka 最终可能会在其他可用的 broker 上为这些分区创建新的副本，以维持复制因子。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture5.webp","alt":"Kafka broker 故障处理","width":"428","height":"404"}]}]}],["$","p",null,{"children":"当添加新的 broker 时，副本会被重新分配以确保 broker 之间的工作负载均衡。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture6.webp","alt":"Kafka 新增 broker 处理","width":"428","height":"464"}]}]}],["$","p",null,{"children":"除了集群成员变更外，broker 之间的工作负载平衡也需要分区副本重分配。在 broker 之间平衡数据有助于防止某些分区可能接收到比其他分区更多流量的热点问题。此外，确保数据在 broker 之间均匀分布可以实现最佳的资源利用。"}],["$","p",null,{"children":"Kafka 的开源版本支持一个工具来实现分区重分配，叫做 kafka-reassign-partitions (bin/kafka-reassign-partitions.sh)。该工具可以在 3 种模式下运行："}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"-generate"}],": 用于创建分区重分配计划；给定主题列表和 broker 列表，该工具会生成一个候选重分配计划，将主题的分区移动到新的 broker。"]}],["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"-execute"}],": 在此模式下，工具根据用户提供的计划执行分区重分配。这可以是自定义的手动创建计划，也可以是使用 --generate 选项提供的计划。"]}],["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"-verify"}],": 该工具验证上次 --execute 期间列出的所有分区的重分配状态。"]}]]}],["$","p",null,{"children":"然而，用户需要手动完成重分配过程，这容易出错且效率低下。有没有办法自动处理这种重分配呢？幸运的是，已经开发出了第三方工具来实现这个目的。"}],["$","h2",null,{"className":"content-header","id":"linkedin-的-cruise-control","children":[["$","a",null,{"href":"#linkedin-的-cruise-control","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"LinkedIn 的 Cruise Control"]}],["$","p",null,{"children":[["$","strong",null,{"children":"Cruise Control"}]," 是一个帮助大规模运行 Apache Kafka 集群的工具。由于 Kafka 的普及，许多公司的 Kafka 集群规模在不断扩大。在 LinkedIn，运营着超过 7000 个 Kafka broker，这使得 Kafka 的工作负载平衡变得极具挑战性。此外，监控和检测大型 Kafka 集群中的问题也至关重要。"]}],["$","p",null,{"children":"Cruise Control 提供以下功能："}],["$","ul",null,{"children":[["$","li",null,{"children":"资源利用率跟踪"}],["$","li",null,{"children":"当前 Kafka 集群状态可观察性"}],["$","li",null,{"children":"集群异常检测、告警和自我修复"}],["$","li",null,{"children":"管理操作（如 broker 添加/删除或集群重平衡）"}],["$","li",null,{"children":"多目标重分配计划生成"}]]}],["$","p",null,{"children":"Cruise Control 依赖最近的副本负载信息来优化集群。它定期收集 broker 和分区级的资源使用情况，以捕获每个分区的流量模式。利用这些模式，它确定每个分区对 broker 的负载影响。该工具然后构建一个工作负载模型来模拟 Kafka 集群的性能。目标优化器基于用户定义的目标列表，探索各种方式为集群工作负载生成优化方案。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture7.webp","alt":"Cruise Control 架构","width":"394","height":"368"}]}]}],["$","p",null,{"children":["这种方法与 ",["$","code",null,{"className":"custom-code","children":"kafka-reassign-partitions"}]," 不同；虽然 Kafka 原生工具仅基于提供的输入进行重平衡，但 Cruise Control 使用工作负载模型，并为重平衡计划提供更强大的目标集。"]}],["$","p",null,{"children":"尽管 Cruise Control 帮助解决了重平衡操作的开销问题，但在 broker 之间通过网络移动数据的需求仍然存在。当数据在 broker 之间传输时，集群必须等待一段时间才能达到平衡状态。这也使得 Cruise Control 或其他第三方工具的平衡过程在执行时可能不够准确；当工具执行决策时，它只针对集群的当前快照进行操作。由于 Kafka 中的数据需要复制，决策执行速度较慢。在执行决策时，与该决策相关的集群状态快照可能已经发生显著变化，使得决策的准确性降低。"}],["$","p",null,{"children":"这个问题在 Kafka 中持续存在，这是由于其设计目标是保持存储和计算紧密集成。"}],["$","h2",null,{"className":"content-header","id":"automq无需移动数据","children":[["$","a",null,{"href":"#automq无需移动数据","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"AutoMQ：无需移动数据"]}],["$","p",null,{"children":["在 ",["$","strong",null,{"children":"AutoMQ"}]," 中，这些问题变得简单了。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"AutoMQ"}]," 利用 Apache Kafka 代码实现 100% 的 Kafka 协议兼容性，同时引入共享存储架构来替代 Kafka broker 的本地磁盘。其目标是使系统完全无状态。"]}],["$","p",null,{"children":["虽然 Kafka broker 直接将消息写入操作系统页面缓存，但 ",["$","strong",null,{"children":"AutoMQ"}]," broker 首先将消息写入堆外内存缓存，在写入对象存储之前对数据进行批处理。为了确保在 broker 无法将数据从内存移动到对象存储时的数据持久性，AutoMQ 引入了可插拔的预写日志（",["$","strong",null,{"children":"Write-Ahead Log"}],", ",["$","code",null,{"className":"custom-code","children":"WAL"}],"）。Broker 必须确认消息已存储 WAL 中，然后才能写入 S3。在接收消息时，broker 将其写入内存缓存，并仅在将其持久化到 WAL 后才返回确认。如果发生 broker 故障，AutoMQ 利用 WAL 中的数据进行恢复。"]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture8.webp","alt":"AutoMQ 架构","width":"766","height":"572"}]}]}],["$","p",null,{"children":"通过这种方式，AutoMQ 实现了完全的计算存储分离。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture9.webp","alt":"AutoMQ 架构","width":"648","height":"450"}]}]}],["$","p",null,{"children":"AutoMQ 的设计暗示了两个重要事实："}],["$","ol",null,{"children":[["$","li",null,{"children":"由于对象存储服务保证了数据的持久性和可用性，因此无需在 broker 之间复制数据。因此，每个分区只会有一个副本 —— 主副本。"}],["$","li",null,{"children":"Broker 是完全无状态的；broker 和分区之间的关系仅通过元数据管理，而不是在 broker 的本地磁盘上物理存储负责的分区数据。"}]]}],["$","p",null,{"children":"因此，重平衡过程变得简单得多。不需要移动数据；AutoMQ 只需要调整 broker 和分区之间的元数据映射。这使得决策可以快速、准确和有效地执行。"}],["$","p",null,{"children":["说到元数据，AutoMQ 利用基于 Kafka 的 ",["$","strong",null,{"children":"KRaft"}]," 模式的元数据管理架构。最初，Kafka 依赖单独的 ZooKeeper 服务器进行集群元数据管理。在 KRaft 模式下，Kafka 使用内部基于 Raft 的控制器仲裁组 —— 一组负责维护和确保元数据一致性的 broker。在 KRaft 中，每个 broker 都保留元数据的本地副本。同时，控制器仲裁组的领导者管理更新并将其复制到所有 broker，从而减少操作复杂性和潜在的故障点。"]}],["$","p",null,{"children":"AutoMQ 将集群元数据（如分区和 broker 之间的映射）存储在控制器仲裁组领导者中。只有领导者可以修改这些元数据；如果 broker 想要更改它，必须与领导者通信。元数据被复制到每个 broker；元数据的任何更改都由控制器传播到每个 broker。"}],["$","h2",null,{"className":"content-header","id":"autobalancerautomq-的自平衡功能","children":[["$","a",null,{"href":"#autobalancerautomq-的自平衡功能","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"AutoBalancer：AutoMQ 的自平衡功能"]}],["$","h3",null,{"className":"content-header","id":"目标","children":[["$","a",null,{"href":"#目标","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"目标"]}],["$","p",null,{"children":"目标是指导 Kafka 集群优化和平衡的一组目标或约束。这些目标定义了特定要求，如 broker 之间的负载分布、资源利用限制、分区复制和延迟目标。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture10.webp","alt":"AutoBalancer 目标分类","width":"490","height":"280"}]}]}],["$","p",null,{"children":["与提供预定义目标并允许用户编写自己的目标的 Cruise Control 不同，AutoMQ 的自平衡功能 ",["$","strong",null,{"children":"AutoBalancer"}]," 通过提供一组经过充分测试的目标来简化事 AutoMQ 中的每个目标都定义了阈值和可接受范围。例如，如果目标涉及平衡 broker 利用率，CPU 利用率阈值为 50%，范围为 ±20%，则可接受范围从 30% 到 70%。只要流量保持在这个范围内，就认为达到了目标。AutoBalancer 将目标分为两类："]}],["$","ol",null,{"children":["$","li",null,{"children":[["$","strong",null,{"children":"检测类型"}],"的目标，如检查资源容量违规（CPU 或网络 I/O）。"]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture11.webp","alt":"AutoBalancer 目标分类","width":"422","height":"260"}]}]}],["$","ol",null,{"start":"2","children":["$","li",null,{"children":[["$","strong",null,{"children":"优化类型"}],"的目标，如集群流量重平衡。AutoMQ 进一步将优化目标分为生产者、消费者和 QPS（每秒查询数）平衡目标。不同类型的平衡目标解决不同的指标。例如，生产者/消费者平衡目标旨在确保生产者/消费者流量平衡，或 QPS 目标旨在平衡 broker 之间的 QPS。"]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture12.webp","alt":"AutoBalancer 目标分类","width":"498","height":"398"}]}]}],["$","p",null,{"children":"为了确保优化目标执行后效果的稳定性，AutoMQ 会为检测目标和优化目标分别谨慎选择阈值和范围。例如，通过缩小优化目标的范围可以确保优化目标处理后获得更精确的结果。"}],["$","p",null,{"children":"某些目标可能比其他目标具有更高的优先级。AutoMQ 按优先级将目标分类为硬目标和软目标："}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"硬目标"}],"：这些目标必须在任何情况下都得到满足，例如限制 broker 的分区数量或限制 broker 流量的上限。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"软目标"}],"：如果与硬目标发生冲突，软目标可以被忽略。流量平衡目标就是一个例子。"]}]]}],["$","p",null,{"children":"对于目标管理，AutoMQ 用数学模型表示每个目标。每个模型根据特定的数学件指示 broker 是否满足目标。在某些情况下，可能有多个可能的操作来实现目标（例如，将分区从 broker A 移动到 B 或从 broker A 移动到 C —— 两者都可以帮助平衡集群流量）。AutoMQ 还使用数学系统来确定在特定情况下最优的决策。每个决策基于与目标相关的参数进行评分，得分最高的决策将被执行。"}],["$","h3",null,{"className":"content-header","id":"组件","children":[["$","a",null,{"href":"#组件","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"组件"]}],["$","p",null,{"children":"AutoBalancer 的实现主要包含以下三个组件："}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture13.webp","alt":"AutoBalancer 目标分类","width":"1124","height":"860"}]}]}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"指标收集器"}],"：Apache Kafka 基于 YammerMetrics 和 KafkaMetrics 提供了一个指标收集系统。些指标可以通过 ",["$","code",null,{"className":"custom-code","children":"MetricsRegistry"}]," 和 ",["$","code",null,{"className":"custom-code","children":"MetricsReporter"}]," 接口进行监控。基于这些接口，AutoMQ 实现了报告器来定期收集预定义的指标，如网络流量吞吐量。AutoMQ 使用内部主题在 broker 和控制器之间传输指标；收集指标后，报告器将它们编译成多个消息并发送到内部主题。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"状态管理器"}],"：在控制器上，AutoMQ 维护着一个 ",["$","code",null,{"className":"custom-code","children":"ClusterModel"}],"，代表集群的当前状态和分区负载。通过监控 KRaft 元数据来管理集群的变化，如 broker 的添加、删除或分区重分配和删除，以更新 ",["$","code",null,{"className":"custom-code","children":"ClusterModel"}],"。同时，控制器持续从内部主题消费，预处理提取的指标，并更新 ",["$","code",null,{"className":"custom-code","children":"ClusterModel"}],"，确保它准确反映集群的当前状态。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"决策调度器"}],"：该组件旨在帮助集群实现期望的结果，如限制每个 broker 的分区数量或限制单个 broker 的流量。在 AutoMQ 中，只有活动控制器参与决策和调度。在开始决策过程之前，AutoMQ 会 ",["$","code",null,{"className":"custom-code","children":"ClusterModel"}]," 进行快照，使用这个快照状态进行后续调度。一旦快照完成，",["$","code",null,{"className":"custom-code","children":"ClusterModel"}]," 可以继续更新。AutoMQ 的决策过程使用类似于 Cruise Control 的启发式调度算法。"]}]}]]}],["$","h3",null,{"className":"content-header","id":"典型流程","children":[["$","a",null,{"href":"#典型流程","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"典型流程"]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/kafka-rebalancing-automq/picture14.webp","alt":"AutoBalancer 流程","width":"950","height":"840"}]}]}],["$","p",null,{"children":"自平衡调度器流程每个间隔（例如每 60 秒）启动一次，检查集群是否满足所有目标："}],["$","ol",null,{"children":[["$","li",null,{"children":"如果满足，调度器返回休眠状态"}],["$","li",null,{"children":"如果不满足，调度器将获取违反目标的 broker 列表"}],["$","li",null,{"children":"对于每个违规的 broker，调度器将制定分区重分配计划，试图使该 broker 达到目标"}],["$","li",null,{"children":"调度器然后检查分区重分配对该 broker 是否可行。如果可行，计划将在此集群中执行。如果不可行，这个 broker 无法满足目标，调度器将继续检查列表中的其他 broker"}]]}],["$","h3",null,{"className":"content-header","id":"场景","children":[["$","a",null,{"href":"#场景","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"场景"]}],["$","p",null,{"children":"让我们回顾 AutoBalancer 在不同场景下的行为："}],["$","blockquote",null,{"children":["$","p",null,{"children":"在云环境中，\"机架\"可以指代一个可用区。"}]}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"主题创建"}],"：AutoBalancer 支持主题创建时的架感知。它支持在机架间随机分配数据，但会考虑每个机架的\"权重\"。权重较重的机架平均会接收更多数据。在机架内部，数据在 broker 之间的分配将遵循它们各自的权重。如果一个 broker 具有更高的权重，它将在该机架内接收更大份额的数据。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"添加 broker"}],"：AutoBalancer 支持新 broker 的逐步预热。系统不会一次性将所有流量发送到新 broker，而是随着时间推移慢慢引导流量，避免压垮它。除非涉及新机架，否则 AutoBalancer 还会尽量减少扩展过程中的跨机架流量，以防止网络拥塞。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"移除 broker"}],"：AutoBalancer 支持自动将要移除的 broker 负责的分区迁移到另一个 broker。它会尽量将分区迁移到与被移除 broker 相同机架上的 broker。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"不平衡吞吐量"}],"：系统根据 broker 处理特定请求率的能力分配流量。每个物理 broker 都有一个\"权重\"。这个权重衡量其处理负载的容量或能力。例如，性能更强的 broker 可能被分配更高的权重。AutoMQ 会考虑网络、IO 或 CPU 核心等因素来确定每个 broker 的权重。系统持续监控每个节点的负载和处理能力，以调整调度，防止任何单个 broker 过载。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"单节点故障"}],"：AutoBalancer 支持识别慢速 broker，这可能预示潜在问题。系统随后可以通过将任务转移到更健康的节点来减少这些慢速 broker 的负载，允许慢速节点在不影响系统性能的情况下恢复。"]}]}]]}],["$","h3",null,{"className":"content-header","id":"autobalancer-与-cruise-control-的对比","children":[["$","a",null,{"href":"#autobalancer-与-cruise-control-的对比","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"AutoBalancer 与 Cruise Control 的对比"]}],["$","p",null,{"children":"在结束本文之前，让我们回顾一下 AutoBalancer 和 Cruise Control 的一些区别："}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":"AutoMQ 原生支持 AutoBalancer 功能，无需复杂的操作和部署。相比之下，Cruise Control 需要独立部署和管理，与 Kafka 集群并行运行。"}]}],["$","li",null,{"children":["$","p",null,{"children":"Apache Kafka 在移动分区以平衡流量时需要复制大量数据，导致执行成本高昂。因此，Cruise Control 的平衡目标设计得严格，仅在流量波动较小的场景下有效。对于具有显著负载变化的场景，Cruise Control 难以保持有效性。AutoMQ 凭借其计算存储分离的设计，更适合处理复杂的负载场景。"}]}],["$","li",null,{"children":["$","p",null,{"children":"得益于其设计，AutoMQ 允许 AutoBalancer 比 Cruise Control 更快地执行副本重分配。此外，由于 AutoBalancer 是 AutoMQ 的一个组成部分，它可以直接消费 KRaft 日志，使其能够更快地响应集群变化。"}]}]]}],["$","h2",null,{"className":"content-header","id":"总结","children":[["$","a",null,{"href":"#总结","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"总结"]}],["$","p",null,{"children":"感谢你阅读到这里。"}],["$","p",null,{"children":"在本文中，我们重新回顾了一些 Kafka 术语，例如分区副本如何在 broker 之间分布，以及为什么在集群成员变化时需要副本重分配。然后我们探讨了 Kafka 对重分配过程的原生解决方案。"}],["$","p",null,{"children":"接着，我们研究了像 Cruise Control 这样的第三方工具如何帮助用户更方便、更稳健地简化这个过程。我们发现 AutoMQ 可以完全解决重分配过程中的数据移动挑战，因为数据存储在 broker 之外，只需要调整元数据。最后，我们深入探讨了 AutoBalancer，即 AutoMQ 的自平衡功能。"}],["$","p",null,{"children":"我们看到，虽然 Cruise Control 协助用户处理 Kafka 的重分配过程，但核心问题仍然存在：数据仍然需要通过网络在 broker 之间传输。AutoMQ 的创新架构允许数据完全存储在对象存储中，这使得许多 Kafka 操作对用户来说变得更加简单，特别是在分区重分配期间；当分区分配给不同的 broker 时，只需要调整元数据。这也使得其内部自平衡更加高效和稳健。"}]]}]}],["$","div",null,{"className":"pb-6 pt-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L12",null,{"slug":"backend/kafka-rebalancing-automq"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/backend/automq-kafka-cost","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Previous post: AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本","children":["← ","AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/security/dga-research","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Next post: DGA 域名检测研究","children":["DGA 域名检测研究"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Kafka 重平衡挑战及 AutoMQ 的解决方案"}],["$","meta","3",{"name":"description","content":"文章详细介绍了 Kafka 在重平衡过程中面临的挑战，以及 AutoMQ 如何通过创新的存储计算分离架构来解决这些问题。通过将数据存储在对象存储中，AutoMQ 无需在 broker 间移动数据就能实现重平衡，大大提高了效率。文章还介绍了 AutoMQ 的自平衡组件 AutoBalancer 的工作原理和优势。"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/blog/backend/kafka-rebalancing-automq"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/feed.xml"}],["$","meta","8",{"property":"og:title","content":"Kafka 重平衡挑战及 AutoMQ 的解决方案"}],["$","meta","9",{"property":"og:description","content":"文章详细介绍了 Kafka 在重平衡过程中面临的挑战，以及 AutoMQ 如何通过创新的存储计算分离架构来解决这些问题。通过将数据存储在对象存储中，AutoMQ 无需在 broker 间移动数据就能实现重平衡，大大提高了效率。文章还介绍了 AutoMQ 的自平衡组件 AutoBalancer 的工作原理和优势。"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/blog/backend/kafka-rebalancing-automq"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"article"}],["$","meta","15",{"property":"article:published_time","content":"2024-12-02T00:00:00.000Z"}],["$","meta","16",{"property":"article:modified_time","content":"2024-12-02T00:00:00.000Z"}],["$","meta","17",{"property":"article:author","content":"mainJayLai"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"Kafka 重平衡挑战及 AutoMQ 的解决方案"}],["$","meta","20",{"name":"twitter:description","content":"文章详细介绍了 Kafka 在重平衡过程中面临的挑战，以及 AutoMQ 如何通过创新的存储计算分离架构来解决这些问题。通过将数据存储在对象存储中，AutoMQ 无需在 broker 间移动数据就能实现重平衡，大大提高了效率。文章还介绍了 AutoMQ 的自平衡组件 AutoBalancer 的工作原理和优势。"}],["$","meta","21",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
