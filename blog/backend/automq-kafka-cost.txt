3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],""]
a:I[8173,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["slug","backend/automq-kafka-cost","c"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["blog",{"children":[["slug","backend/automq-kafka-cost","c"],{"children":["__PAGE__?{\"slug\":[\"backend\",\"automq-kafka-cost\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","backend/automq-kafka-cost","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a9b9096fa657c0d0.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
11:I[4347,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
12:I[408,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
13:I[9629,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
2:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本\",\"datePublished\":\"2024-11-29T00:00:00.000Z\",\"dateModified\":\"2024-11-29T00:00:00.000Z\",\"description\":\"这篇文章介绍了 AutoMQ 如何通过创新的 WAL 存储架构和智能的服务发现机制，让生产者与同可用区的 broker 通信，并利用对象存储替代传统数据复制方案，从而几乎完全消除了 Kafka 中的跨可用区数据传输成本。\",\"image\":\"https://pngimg.com/uploads/github/github_PNG80.png\",\"url\":\"https://blog.mainjay.cloudns.ch/blog/backend/automq-kafka-cost\",\"author\":[{\"@type\":\"Person\",\"name\":\"mainJayLai\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L11",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","div",null,{"className":"beautiful-chinese-title","children":["$","h1",null,{"className":"text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14","children":"AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本"}]}],["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base font-medium leading-6 text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2024-11-29T00:00:00.000Z","children":"November 29, 2024"}]}]]}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0","children":[["$","div",null,{"className":"divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0","children":["$","div",null,{"className":"beautiful-chinese-content prose max-w-none pb-8 pt-10 dark:prose-invert","children":[["$","h2",null,{"className":"content-header","id":"引言","children":[["$","a",null,{"href":"#引言","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"引言"]}],["$","p",null,{"children":"如果你对消息系统或流处理系统感兴趣，你一定听说过 Kafka。很可能你也遇到过无数声称比 Kafka 更好的解决方案。"}],["$","p",null,{"children":"这证明了两件事：首先，由于 Kafka 的多功能性，越来越多的公司将其纳入基础设施（这是一个不断增长的市场）。其次，许多用户在运营 Kafka 时遇到困难，尤其是在这个云计算时代（这些都是需要解决的痛点）。"}],["$","p",null,{"children":["当将 Apache Kafka 迁移到云端时，其复制因子会导致 leader 将接收到的数据发送到不同可用区（AZ）的其他 follower。与计算和存储成本相比，数据传输成本一开始可能并不明显。然而，根据 Confluent 的观察，",["$","strong",null,{"children":"跨可用区传输成本竟然可能占总账单的 50% 以上"}],"（稍后会详细介绍）。"]}],["$","p",null,{"children":"我们发现 WarpStream 通过修改服务发现机制来避免跨可用区传输成本，确保客户端始终与同一可用区的 broker 通信。WarpStream 对 Kafka 协议的重写在这里起到了关键作用。"}],["$","p",null,{"children":["这篇文章我们将探讨 ",["$","strong",null,{"children":"AutoMQ"}],"（一个 100% 兼容 Kafka 的替代解决方案）如何帮助用户显著降低跨可用区传输成本。该解决方案旨在通过利用 Kafka 的代码库处理协议，并重写存储层，引入 WAL 来有效地将数据卸载到对象存储，从而在云端高效运行 Kafka。"]}],["$","h2",null,{"className":"content-header","id":"跨可用区成本","children":[["$","a",null,{"href":"#跨可用区成本","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"跨可用区成本"]}],["$","p",null,{"children":"Apache Kafka 最初是在 LinkedIn 开发的，用于满足公司密集的日志处理需求。它是专门为 LinkedIn 的环境构建的，工程师通过利用页面缓存和磁盘上的顺序访问模式来优化 Kafka。这种方法使他们能够实现非常高的吞吐量，同时保持系统相对简单，因为操作系统处理了大部分存储相关的任务。"}],["$","p",null,{"children":"Kafka 依靠复制来确保数据持久性。当消息写入 leader 分区时，必须复制到 follower 分区。最初在 LinkedIn 开发时，Kafka 主要在自托管数据中心运行，基础设施团队在 leader 跨不同数据中心复制消息到 follower 时并不考虑网络成本。"}],["$","p",null,{"children":["然而，当用户将 Kafka 迁移到云端时，情况发生了变化。Leader 将数据复制到不同可用区的 follower 以确保在可用区故障时的数据可用性，但云提供商对跨区数据传输收取网络费用。根据 Confluent 的观察，",["$","strong",null,{"children":"在自管理 Apache Kafka 时，由于复制导致的跨可用区数据传输成本竟然可能占基础设施成本的 50% 以上"}],"。"]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":[["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture1.webp","alt":"Maple","width":"1400","height":"868"}]," Confluent 关于掌握 Kafka 基础设施成本的指南 (2023)"]}]}],["$","p",null,{"children":"让我们来看一些具体数字：假设有一个跨三个可用区部署的三节点 Kafka 集群。如果其中一个可用区的 broker 宕机，集群仍然可以通过剩余的两个 follower 继续服务。在一个均衡的集群中，分区 leader 会尽量分布在三个可用区中，这意味着大约三分之二的时间，生产者会向其他可用区的 leader 写入数据。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture2.webp","alt":"Maple","width":"1400","height":"897"}]}]}],["$","p",null,{"children":"一旦 leader 接收到消息，它会将数据复制到其他可用区的 broker 以确保高数据可靠性，这导致产生了初始生产请求两倍的跨可用区流量。"}],["$","p",null,{"children":["简而言之，Apache Kafka 的多可用区部署架构至少会产生 ",["$","code",null,{"className":"custom-code","children":"(2/3 + 2)"}]," 倍于单位价格的跨可用区流量（在 AWS 中为 ",["$","code",null,{"className":"custom-code","children":"$$0.01/GB"}],"，入站和出站流量分开计费）。"]}],["$","blockquote",null,{"children":["$","p",null,{"children":"以上计算还未考虑消费者的跨可用区成本。"}]}],["$","p",null,{"children":["如果我们使用三台 ",["$","code",null,{"className":"custom-code","children":"r6i.large"}],"（2 核心-16GB 内存）的 broker，提供 30MiB/s 的写入吞吐量，Apache Kafka 的月度跨可用区流量成本计算如下："]}],["$","$L12",null,{"className":"language-js","children":["$","code",null,{"className":"language-js code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token number","children":"30"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token number","children":"60"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token number","children":"60"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token number","children":"24"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token number","children":"30"}]," ",["$","span",null,{"className":"token operator","children":"/"}]," ",["$","span",null,{"className":"token number","children":"1024"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token number","children":"2"}]," ",["$","span",null,{"className":"token operator","children":"/"}]," ",["$","span",null,{"className":"token number","children":"3"}]," ",["$","span",null,{"className":"token operator","children":"+"}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token number","children":"0.02"}]," ",["$","span",null,{"className":"token operator","children":"="}]," $4050\n"]}]}]}],["$","p",null,{"children":["而虚拟机成本仅为：",["$","code",null,{"className":"custom-code","children":"3 * 0.126 $/h（r6i.large 单价）* 24 * 30 = $272"}],"（仅占跨可用区流量成本的 6.7%）"]}],["$","h2",null,{"className":"content-header","id":"automq-概述","children":[["$","a",null,{"href":"#automq-概述","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"AutoMQ 概述"]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":[["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture3.webp","alt":"Maple","width":"1134","height":"748"}]," AutoMQ 架构概览"]}]}],["$","p",null,{"children":"AutoMQ 旨在通过将所有消息写入对象存储来提高 Kafka 的效率和弹性，同时不影响性能。"}],["$","p",null,{"children":["为实现这一目标，AutoMQ 重用了 Apache Kafka 的计算和协议码，并引入共享存储架构来替代 Kafka broker 的本地磁盘。从高层次来看，AutoMQ broker 将消息写入内存缓存。在异步将消息传输到对象存储之前，broker 必须将数据写入预写日志（",["$","strong",null,{"children":"WAL"}],"）存储以确保持久性。"]}],["$","blockquote",null,{"children":["$","p",null,{"children":"预写日志是一种用于崩溃恢复和事务恢复的追加式磁盘结构。数据库的变更在写入数据库之前，会首先记录在这个结构中。"}]}],["$","p",null,{"children":["AutoMQ 使用堆外缓存内存层来处理所有消息的读写，提供实时性能。",["$","strong",null,{"children":"EBS 设备作为 AutoMQ 的 WAL"}],"；当 broker 接收到消息时，它会将消息写入内存缓存，并且只有在消息持久化到 WAL 后才返回确认。EBS 同时也用于 broker 故障时的数据恢复。"]}],["$","p",null,{"children":"所有 AutoMQ 数据都存储在对象存储中，使用 AWS S3 或 Google GCS。broker 从日志缓存异步写入数据到对象存储。对于元数据管理，AutoMQ 利用了 Kafka 的草稿模式。"}],["$","p",null,{"children":"AutoMQ 的 WAL 的一个重要特性是其灵活性，允许用户根据具体用例选择不同的存储选项。例如，如果 AWS 在未来发布更先进的磁盘设备，用户可以无缝采用这个新的存储选项来提升 AutoMQ 的性能。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":[["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture4.webp","alt":"Maple","width":"1400","height":"863"}]," AutoMQ WAL 存储选项示意图"]}]}],["$","h2",null,{"className":"content-header","id":"automq-如何降低跨可用区成本","children":[["$","a",null,{"href":"#automq-如何降低跨可用区成本","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"AutoMQ 如何降低跨可用区成本"]}],["$","h3",null,{"className":"content-header","id":"生产路径","children":[["$","a",null,{"href":"#生产路径","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"生产路径"]}],["$","p",null,{"children":"使用 EBS WAL 时，虽然无法完全消除跨可用区数据传输成本，但由于数据存储在 S3 中且不需要在 broker 之间复制，AutoMQ 显著降低了这些网络成本。然而，当生产者向不同可用区的 leader 分区发送消息时，客户仍需支付跨可用区数据传输费用。"}],["$","p",null,{"children":"AutoMQ 引入了一个使用 S3 作为 WAL 的解决方案来消除跨可用区数据传输成本。与将数据先写入 EBS 再写入 S3 不同，S3 WAL 允许 broker 直接将数据写入 S3，确保生产者只向同一可用区内的 broker 发送消息。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture5.webp","alt":"Maple","width":"466","height":"480"}]}]}],["$","p",null,{"children":"在 Kafka 中，生产者在发送消息之前，会向引导服务器发送元数据请求以获取分区 leader broker 的身份信息。在生产数据时，客户端总是尝试与指定主题分区的 leader 通信。"}],["$","blockquote",null,{"children":["$","p",null,{"children":"在 Kafka 中，写入操作始终通过 leader 完成。"}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":[["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture6.webp","alt":"Maple","width":"1400","height":"705"}]," Kafka 中的写入流程"]}]}],["$","p",null,{"children":"而在使用 S3 WAL 的 AutoMQ 中，情况有所不同。想象一个场景：生产者在 AZ1而分区 P2 的 leader（B2）在 AZ2，同时在 AZ1 中还有一个 broker 1（B1）。让我们来看看这种方法下消息生产的完整路径。"}],["$","ul",null,{"children":["$","li",null,{"children":"当生产者想要写入 P2 时，它首先向引导 broker 集合发送元数据请求；生产者必须包含其所在可用区（本例中为 AZ1）的信息。"}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":[["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture7.webp","alt":"Maple","width":"606","height":"234"}]," 元数据请求流程示意图"]}]}],["$","blockquote",null,{"children":["$","p",null,{"children":"在 Kafka 中，发送元数据请求后，生产者可能会收到与其位于不同可用区的 broker B2 的信息，这会导致跨可用区成本。然而，AutoMQ 的目标是避免这种情况。"}]}],["$","ul",null,{"children":["$","li",null,{"children":"在 AutoMQ 端，使用一致性哈希算法将 broker 映射到不同的可用区。例如，假设 AutoMQ 将 AZ2 中的 B2 映射到 AZ1 中的 B1。由于 AutoMQ 知道生产者 Pr1 在 AZ1（基于元数据请求），它会为此请求返回 B1 的信息。如果生产者与 B2 在同一个可用区，则会返回 B2 的信息。核心思想是确保生产者始终与同一可用区的 broker 通信，有效避免跨可用区通信。"}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture8.webp","alt":"Maple","width":"624","height":"396"}]}]}],["$","ul",null,{"children":[["$","li",null,{"children":"在收到 B1 的信息后（请注意，这个 broker 并不负责目标分区），生产者开始向 B1 发送消息。"}],["$","li",null,{"children":"B1 在内存中缓冲消息，当达到 8MB 或经过 250ms 后，将缓冲的数据作为临时文件写入对象存储。"}]]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":[["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture9.webp","alt":"Maple","width":"400","height":"416"}]," AutoMQ 消息写入完整流程图"]}]}],["$","ul",null,{"children":["$","li",null,{"children":"这里有一个有趣的地方：在成功将消息写入 S3 后，B1 会向 B2（分区的实际 leader）发送 RPC 请求，通知它临时数据的位置（这会在不同可用区的 broker 之间产生少量的跨可用区流量）。"}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture10.webp","alt":"Maple","width":"476","height":"226"}]}]}],["$","ul",null,{"children":["$","li",null,{"children":"B2 随后会读取这些临时数据并将其追加到目标分区（P2）。一旦 B2 完成数据写入分区，它会响应 B1，然后 B1 最终向生产者发送确认。"}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture11.webp","alt":"Maple","width":"408","height":"404"}]}]}],["$","p",null,{"children":"这里有一张图表帮助你理解整个过程:"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/backend/automq-kafka-cost/picture12.webp","alt":"Maple","width":"780","height":"980"}]}]}],["$","p",null,{"children":"这种方法完全消除了跨可用区数据传输成本,但客户需要比使用 EBS WAL 时部署更多的虚拟机实例(代理)。这是因为云环境中虚拟机和网络吞吐量的限制。与 EBS WAL 相比,需要从 S3 读取额外的数据,这会消耗虚拟机的网络带宽。换句话说,S3 WAL 需要更多的虚拟机来处理增加的网络吞吐量,以确保维持与 EBS WAL 相同的读写性能。"}],["$","h3",null,{"className":"content-header","id":"消费路径","children":[["$","a",null,{"href":"#消费路径","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"消费路径"]}],["$","p",null,{"children":"对于消费路径，过程几乎与 Kafka 相同。得益于 100% 的 Kafka 兼容性，AutoMQ 消费者可以利用 Kafka 的机架感知特性来实现数据消费路径，确保从同一可用区的 broker 拉取数据。"}],["$","p",null,{"children":"关于 AutoMQ 如何帮助消费者消除跨可用区成本的另一个重要因素是其内部自平衡机制。该机制包括内置的机架感知分区调度，确保 AutoMQ 在多个可用区的 broker 之间平衡分区。"}],["$","p",null,{"children":"虽然 Apache Kafka 支持机架感知机制，但仅凭这个特性无法完全消除跨可用区流量。要防止跨可用区流量成本，Apache Kafka 需要在整个运行过程中保持跨可用区的分区平衡，即使在扩缩容、分区迁移或其他过程中也是如此。AutoMQ 通过其自平衡机制为用户自动管理这些操作。这不仅确保了流量平衡和系统在故障时的自我修复，还在降低跨可用区流量成本方面发挥着关键作用。"}],["$","h2",null,{"className":"content-header","id":"观察结果","children":[["$","a",null,{"href":"#观察结果","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"观察结果"]}],["$","p",null,{"children":"用户可以根据不同场景选择最优的 WAL 实现方案。对于对延迟敏感的场景，如反欺诈、金融交易或实时数据分析，建议使用 EBS WAL。对于那些延迟不是首要考虑因素的用例，如日志收集或可观测性数据摄入，使用 S3 WAL 可以带来显著的成本节省。"}],["$","p",null,{"children":["从上面的分析中我们了解到，WAL 的实现在 AutoMQ 中扮演着关键角色。WAL 被设计成可插拔的，这意味着如果出现更先进的云存储选项，比如最近推出的 ",["$","strong",null,{"children":"S3 Express One Zone"}],"，用户可以轻松地将其集成到 WAL 中。这种方法使 AutoMQ 能够充分利用新兴云存储解决方案的优势来适应各种用户场景。通过抽象化 WAL，AutoMQ 可以快速利用不同云存储介质的优势，体现了 AutoMQ 所说的\"",["$","strong",null,{"children":"One for All"}],"\"理念。"]}],["$","h2",null,{"className":"content-header","id":"总结","children":[["$","a",null,{"href":"#总结","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"总结"]}],["$","p",null,{"children":"在本文中，我们了解到当用户在云端运行 Apache Kafka 时，跨可用区成本可能占据云账单的很大一部分。这些成本主要来自两个因素：生产者向不同可用区的 leader 发送流量，以及在 broker 之间复制数据的需求。"}],["$","p",null,{"children":"接着，我们探讨了 AutoMQ 如何通过让生产者向同一可用区的 broker 发送消息来应对这一挑战。数据以批量方式写入 S3，之后由 leader 分区获取该数据并将其追加到正确的分区中。通过这种方式，AutoMQ 帮助减少了几乎 100% 的跨可用区成本。（当 broker 跨区发出 RPC 请求时仍会产生少量的跨可用区流量。）"}]]}]}],["$","div",null,{"className":"pb-6 pt-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L13",null,{"slug":"backend/automq-kafka-cost"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/backend/kafka-object-storage","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Previous post: 如何让 Kafka 完全运行在对象存储上？","children":["← ","如何让 Kafka 完全运行在对象存储上？"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/backend/kafka-rebalancing-automq","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Next post: Kafka 重平衡挑战及 AutoMQ 的解决方案","children":["Kafka 重平衡挑战及 AutoMQ 的解决方案"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本"}],["$","meta","3",{"name":"description","content":"这篇文章介绍了 AutoMQ 如何通过创新的 WAL 存储架构和智能的服务发现机制，让生产者与同可用区的 broker 通信，并利用对象存储替代传统数据复制方案，从而几乎完全消除了 Kafka 中的跨可用区数据传输成本。"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/blog/backend/automq-kafka-cost"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/feed.xml"}],["$","meta","8",{"property":"og:title","content":"AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本"}],["$","meta","9",{"property":"og:description","content":"这篇文章介绍了 AutoMQ 如何通过创新的 WAL 存储架构和智能的服务发现机制，让生产者与同可用区的 broker 通信，并利用对象存储替代传统数据复制方案，从而几乎完全消除了 Kafka 中的跨可用区数据传输成本。"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/blog/backend/automq-kafka-cost"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"article"}],["$","meta","15",{"property":"article:published_time","content":"2024-11-29T00:00:00.000Z"}],["$","meta","16",{"property":"article:modified_time","content":"2024-11-29T00:00:00.000Z"}],["$","meta","17",{"property":"article:author","content":"mainJayLai"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"AutoMQ 如何几乎消除了 100% 的 Kafka 跨可用区数据传输成本"}],["$","meta","20",{"name":"twitter:description","content":"这篇文章介绍了 AutoMQ 如何通过创新的 WAL 存储架构和智能的服务发现机制，让生产者与同可用区的 broker 通信，并利用对象存储替代传统数据复制方案，从而几乎完全消除了 Kafka 中的跨可用区数据传输成本。"}],["$","meta","21",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
