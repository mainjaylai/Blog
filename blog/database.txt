3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],""]
a:I[8173,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["slug","database","c"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["blog",{"children":[["slug","database","c"],{"children":["__PAGE__?{\"slug\":[\"database\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","database","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a9b9096fa657c0d0.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
11:I[4347,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
12:I[408,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
13:I[9629,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
2:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"深入剖析数据库索引\",\"datePublished\":\"2024-07-09T00:00:00.000Z\",\"dateModified\":\"2024-07-09T00:00:00.000Z\",\"description\":\"数据库索引的使用需谨慎，它们能显著提升读操作效率，但也增加了内存消耗和写操作成本。选择合适数量和类型的索引至关重要，基数（即列中不同值的数量）对索引效果至关重要。定期维护索引是必要的，以避免内存浪费。深入理解数据库索引的各个方面，将有助于优化应用程序性能和设计决策。\",\"image\":\"https://pngimg.com/uploads/github/github_PNG80.png\",\"url\":\"https://blog.mainjay.cloudns.ch/blog/database\",\"author\":[{\"@type\":\"Person\",\"name\":\"mainJayLai\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L11",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","div",null,{"className":"beautiful-chinese-title","children":["$","h1",null,{"className":"text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14","children":"深入剖析数据库索引"}]}],["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base font-medium leading-6 text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2024-07-09T00:00:00.000Z","children":"July 9, 2024"}]}]]}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0","children":[["$","div",null,{"className":"divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0","children":["$","div",null,{"className":"beautiful-chinese-content prose max-w-none pb-8 pt-10 dark:prose-invert","children":[["$","h2",null,{"className":"content-header","id":"目录","children":[["$","a",null,{"href":"#目录","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"目录"]}],["$","ul",null,{"className":"","children":[["$","li","0",{"className":"","children":[["$","a",null,{"href":"#主键","children":"主键"}],null]}],["$","li","1",{"className":"","children":[["$","a",null,{"href":"#聚簇索引","children":"聚簇索引"}],null]}],["$","li","2",{"className":"","children":[["$","a",null,{"href":"#次要索引","children":"次要索引"}],null]}],["$","li","3",{"className":"","children":[["$","a",null,{"href":"#unique-key-index唯一键索引","children":"UNIQUE Key Index（唯一键索引）"}],null]}],["$","li","4",{"className":"","children":[["$","a",null,{"href":"#composite-index复合索引","children":"Composite Index（复合索引）"}],null]}],["$","li","5",{"className":"","children":[["$","a",null,{"href":"#覆盖索引","children":"覆盖索引"}],null]}],["$","li","6",{"className":"","children":[["$","a",null,{"href":"#部分索引","children":"部分索引"}],null]}],["$","li","7",{"className":"","children":[["$","a",null,{"href":"#索引的一般指导原则","children":"索引的一般指导原则"}],null]}]]}],["$","p",null,{"children":"性能对于许多面向消费者的产品来说至关重要，例如电子商务、支付系统、游戏、交通应用等。尽管现代数据库通过多种内部机制进行了优化以满足性能需求，但很大程度上还是依赖于应用程序开发者。毕竟，只有开发者才知道应用程序需要执行哪些查询。"}],["$","p",null,{"children":["处理关系型数据库的开发者都使用过或至少听说过",["$","strong",null,{"children":"索引"}],"，这是数据库世界中一个非常常见的概念。索引不仅可以提高查询速度，还可以优化数据库的整体性能。然而，最重要的是要理解什么需要建立索引，以及索引如何提高查询响应时间。要做到这一点，你需要充分了解你将如何查询数据库表。只有当你确切知道你的查询和数据访问模式是什么样的，才能创建合适的索引。"]}],["$","p",null,{"children":["用简单的术语来说，",["$","strong",null,{"children":"索引"}],"通过使用不同的内存和磁盘数据结构，将搜索键映射到磁盘上相应的数据。索引的作用是通过减少需要搜索的记录数量来加快搜索速度。大多数关系型数据库使用B树或B+树作为索引的数据结构，这些树形结构能够有效地组织和检索大量数据。"]}],["$","p",null,{"children":["通常，索引是在查询的",["$","code",null,{"className":"custom-code","children":"WHERE"}],"子句中指定的列上创建的，因为数据库会基于这些列来检索和过滤表中的数据。索引的类型多种多样，包括主键索引、唯一索引、普通索引、全文索引和复合索引等，每种类型都有其特定的用途和优势。如果不创建索引，数据库就会扫描所有行，筛选出匹配的行并返回结果。对于包含数百万条记录的表来说，这种扫描操作可能需要很多秒，而这种高响应时间会使API和应用程序变得缓慢且难以使用。"]}],["$","p",null,{"children":"值得注意的是，过度使用索引也可能导致写入操作变慢，因为每次插入或更新数据时，索引也需要更新。因此，在创建索引时需要权衡读取和写入操作的频率。此外，随着数据的插入、更新和删除，索引可能会变得碎片化或不平衡。定期维护索引（如重建或重组）可以保持其效率。"}],["$","p",null,{"children":"让我们来看一个例子——我们将使用MySQL，采用默认的InnoDB数据库引擎。"}],["$","p",null,{"children":["我们创建了一个名为",["$","code",null,{"className":"custom-code","children":"index_demo"}],"的表："]}],["$","$L12",null,{"children":["$","code",null,{"className":"code-highlight language-mysql","children":[["$","span",null,{"className":"code-line","children":"CREATE TABLE index_demo ( \n"}],["$","span",null,{"className":"code-line","children":"    name VARCHAR(20) NOT NULL, \n"}],["$","span",null,{"className":"code-line","children":"    age INT, \n"}],["$","span",null,{"className":"code-line","children":"    pan_no VARCHAR(20), \n"}],["$","span",null,{"className":"code-line","children":"    phone_no VARCHAR(20) \n"}],["$","span",null,{"className":"code-line","children":");\n"}]]}]}],["$","h4",null,{"className":"content-header","id":"如何验证我们正在使用innodb引擎","children":[["$","a",null,{"href":"#如何验证我们正在使用innodb引擎","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"如何验证我们正在使用InnoDB引擎"]}],["$","p",null,{"children":"运行以下命令："}],["$","$L12",null,{"children":["$","code",null,{"className":"code-highlight language-mysql","children":["$","span",null,{"className":"code-line","children":"SHOW TABLE STATUS WHERE name = 'index_demo' \\G;\n"}]}]}],["$","p",null,{"children":["这个SQL命令用于显示名为",["$","code",null,{"className":"custom-code","children":"index_demo"}],"表的详细状态信息。让我们深入解析一下："]}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"SHOW TABLE STATUS"}]," 是MySQL的一个命令，用于显示关于数据库表的低级别信息。"]}],["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"WHERE name = 'index_demo'"}]," 子句指定我们只想查看名为",["$","code",null,{"className":"custom-code","children":"index_demo"}],"的表的信息。"]}],["$","li",null,{"children":[["$","code",null,{"className":"custom-code","children":"\\G"}]," 是MySQL客户端的一个特殊格式化选项。它将结果垂直显示，每个字段占一行，使输出更易读，特别是当结果包含多列时。"]}]]}],["$","$L12",null,{"className":"language-js","children":["$","code",null,{"className":"code-highlight language-js","children":[["$","span",null,{"className":"code-line","children":["mysql",["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token constant","children":"SHOW"}]," ",["$","span",null,{"className":"token constant","children":"TABLE"}]," ",["$","span",null,{"className":"token constant","children":"STATUS"}]," ",["$","span",null,{"className":"token constant","children":"WHERE"}]," name ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"'index_demo'"}]," \\",["$","span",null,{"className":"token constant","children":"G"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token number","children":"1."}]," row ",["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"**"}],["$","span",null,{"className":"token operator","children":"*"}],"\n"]}],["$","span",null,{"className":"code-line","children":["           ",["$","span",null,{"className":"token property literal-property","children":"Name"}],["$","span",null,{"className":"token operator","children":":"}]," index_demo\n"]}],["$","span",null,{"className":"code-line","children":["         ",["$","span",null,{"className":"token property literal-property","children":"Engine"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"InnoDB"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property literal-property","children":"Version"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"10"}],"\n"]}],["$","span",null,{"className":"code-line","children":["     ",["$","span",null,{"className":"token property literal-property","children":"Row_format"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Dynamic"}],"\n"]}],["$","span",null,{"className":"code-line","children":["           ",["$","span",null,{"className":"token property literal-property","children":"Rows"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"0"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token property literal-property","children":"Avg_row_length"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"0"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property literal-property","children":"Data_length"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"16384"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token property literal-property","children":"Max_data_length"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"0"}],"\n"]}],["$","span",null,{"className":"code-line","children":["   ",["$","span",null,{"className":"token property literal-property","children":"Index_length"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"0"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property literal-property","children":"Data_free"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"0"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token property literal-property","children":"Auto_increment"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"NULL"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property literal-property","children":"Create_time"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"2024"}],["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"07"}],["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token number","children":"09"}]," ",["$","span",null,{"className":"token number","children":"03"}],["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token number","children":"51"}],["$","span",null,{"className":"token operator","children":":"}],["$","span",null,{"className":"token number","children":"36"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property literal-property","children":"Update_time"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"NULL"}],"\n"]}],["$","span",null,{"className":"code-line","children":["     ",["$","span",null,{"className":"token property literal-property","children":"Check_time"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"NULL"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property literal-property","children":"Collation"}],["$","span",null,{"className":"token operator","children":":"}]," utf8mb4_general_ci\n"]}],["$","span",null,{"className":"code-line","children":["       ",["$","span",null,{"className":"token property literal-property","children":"Checksum"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token constant","children":"NULL"}],"\n"]}],["$","span",null,{"className":"code-line","children":[" ",["$","span",null,{"className":"token property literal-property","children":"Create_options"}],["$","span",null,{"className":"token operator","children":":"}]," \n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property literal-property","children":"Comment"}],["$","span",null,{"className":"token operator","children":":"}]," \n"]}]]}]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"Engine"}]," 列在上面的截图中表示用于创建表的引擎。这里使用的是 ",["$","code",null,{"className":"custom-code","children":"InnoDB"}],"。"]}],["$","p",null,{"children":"现在让我们在表中插入一些随机数据。我的表中有5行数据，数据如下："}],["$","$L12",null,{"children":["$","code",null,{"className":"code-highlight language-mysql","children":[["$","span",null,{"className":"code-line","children":"INSERT INTO index_demo (name, age, pan_no, phone_no) VALUES\n"}],["$","span",null,{"className":"code-line","children":"('John Doe', 28, 'ABCDE1234F', '9876543210'),\n"}],["$","span",null,{"className":"code-line","children":"('Jane Smith', 35, 'FGHIJ5678K', '8765432109'),\n"}],["$","span",null,{"className":"code-line","children":"('Alice Johnson', 42, 'KLMNO9012P', '7654321098'),\n"}],["$","span",null,{"className":"code-line","children":"('Bob Williams', 31, 'QRSTU3456V', '6543210987'),\n"}],["$","span",null,{"className":"code-line","children":"('Charlie Brown', 39, 'WXYZ7890A', '5432109876');\n"}]]}]}],["$","$L12",null,{"className":"language-js","children":["$","code",null,{"className":"code-highlight language-js","children":[["$","span",null,{"className":"code-line","children":["mysql",["$","span",null,{"className":"token operator","children":">"}]," select ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token keyword module","children":"from"}]," index_demo",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"|"}]," name          ",["$","span",null,{"className":"token operator","children":"|"}]," age  ",["$","span",null,{"className":"token operator","children":"|"}]," pan_no     ",["$","span",null,{"className":"token operator","children":"|"}]," phone_no   ",["$","span",null,{"className":"token operator","children":"|"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"John"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Doe"}],"      ",["$","span",null,{"className":"token operator","children":"|"}],"   ",["$","span",null,{"className":"token number","children":"28"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token constant","children":"ABCDE1234F"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token number","children":"9876543210"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Jane"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Smith"}],"    ",["$","span",null,{"className":"token operator","children":"|"}],"   ",["$","span",null,{"className":"token number","children":"35"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token constant","children":"FGHIJ5678K"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token number","children":"8765432109"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Alice"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Johnson"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"   ",["$","span",null,{"className":"token number","children":"42"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token constant","children":"KLMNO9012P"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token number","children":"7654321098"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Bob"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Williams"}],"  ",["$","span",null,{"className":"token operator","children":"|"}],"   ",["$","span",null,{"className":"token number","children":"31"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token constant","children":"QRSTU3456V"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token number","children":"6543210987"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Charlie"}]," ",["$","span",null,{"className":"token maybe-class-name","children":"Brown"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"   ",["$","span",null,{"className":"token number","children":"39"}]," ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token constant","children":"WXYZ7890A"}],"  ",["$","span",null,{"className":"token operator","children":"|"}]," ",["$","span",null,{"className":"token number","children":"5432109876"}]," ",["$","span",null,{"className":"token operator","children":"|"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"-"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"--"}],["$","span",null,{"className":"token operator","children":"+"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token number","children":"5"}]," rows ",["$","span",null,{"className":"token keyword","children":"in"}]," ",["$","span",null,{"className":"token function","children":"set"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token number","children":"0.00"}]," sec",["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}]]}]}],["$","p",null,{"children":["我到目前为止还没有在这个表上创建任何索引。让我们通过 ",["$","code",null,{"className":"custom-code","children":"SHOW INDEX"}]," 命令来验证这一点。它返回了0个结果。"]}],["$","$L12",null,{"className":"language-js","children":["$","code",null,{"className":"code-highlight language-js","children":[["$","span",null,{"className":"code-line","children":["mysql",["$","span",null,{"className":"token operator","children":">"}]," show index ",["$","span",null,{"className":"token keyword module","children":"from"}]," index_demo",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token maybe-class-name","children":"Empty"}]," ",["$","span",null,{"className":"token function","children":"set"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token number","children":"0.00"}]," sec",["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}]]}]}],["$","p",null,{"children":["此时，如果我们运行一个简单的 ",["$","code",null,{"className":"custom-code","children":"SELECT"}]," 查询，由于没有用户定义的索引，查询将扫描整个表以找出结果："]}],["$","$L12",null,{"children":["$","code",null,{"className":"code-highlight language-mysql","children":["$","span",null,{"className":"code-line","children":"EXPLAIN SELECT * FROM index_demo WHERE name = 'alex';\n"}]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture1.png","alt":"Maple","width":"920","height":"137"}]}]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"EXPLAIN"}]," 命令展示了查询引擎计划如何执行查询。在上面的截图中，您可以看到 ",["$","code",null,{"className":"custom-code","children":"rows"}]," 列返回 ",["$","code",null,{"className":"custom-code","children":"5"}],"，而 ",["$","code",null,{"className":"custom-code","children":"possible_keys"}]," 返回 ",["$","code",null,{"className":"custom-code","children":"null"}],"。",["$","code",null,{"className":"custom-code","children":"possible_keys"}]," 表示此查询可以使用的所有可用索引。",["$","code",null,{"className":"custom-code","children":"key"}]," 列表示在所有可能的索引中，此查询实际将使用哪个索引。"]}],["$","p",null,{"children":"这个解释清楚地说明了在没有索引的情况下，查询引擎是如何处理查询的："}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"rows"}]," 为 5 表示查询预计需要扫描的行数。在这种情况下，它等于表中的总行数，意味着进行了全表扫描。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"possible_keys"}]," 为 null 意味着没有可用的索引可以用于优化这个查询。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"key"}]," 也很可能为 null，表示实际上没有使用任何索引。"]}]}]]}],["$","p",null,{"children":"这种情况下，数据库必须扫描整个表来找到匹配的记录，这在小型表中可能不是问题，但在大型表中可能导致严重的性能问题。这正是索引可以带来显著改善的地方。"}],["$","h2",null,{"className":"content-header","id":"主键","children":[["$","a",null,{"href":"#主键","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"主键"]}],["$","p",null,{"children":["上述查询非常低效。让我们来优化这个查询。我们将把 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 列设为 ",["$","code",null,{"className":"custom-code","children":"PRIMARY KEY"}],"，假设在我们的系统中不存在两个用户使用相同的电话号码。在创建主键时，请考虑以下几点："]}],["$","ul",null,{"children":[["$","li",null,{"children":"主键应该是应用程序中许多关键查询的一部分。"}],["$","li",null,{"children":"主键是一个约束，用于唯一标识表中的每一行。如果多个列组成主键，那么这种组合对于每一行都应该是唯一的。"}],["$","li",null,{"children":["主键应该是非空的。永远不要将可空字段作为主键。根据ANSI SQL标准，主键应该能够相互比较，您应该能够确定一个特定行的主键列值是大于、小于还是等于其他行的主键值。由于在SQL标准中 ",["$","code",null,{"className":"custom-code","children":"NULL"}]," 表示未定义的值，您无法确定性地将 ",["$","code",null,{"className":"custom-code","children":"NULL"}]," 与任何其他值进行比较，因此逻辑上不允许使用 ",["$","code",null,{"className":"custom-code","children":"NULL"}],"。"]}],["$","li",null,{"children":["理想的主键类型应该是数字，如 ",["$","code",null,{"className":"custom-code","children":"INT"}]," 或 ",["$","code",null,{"className":"custom-code","children":"BIGINT"}],"，因为整数比较更快，所以遍历索引会非常迅速。"]}]]}],["$","p",null,{"children":["我们经常在表中定义一个 ",["$","code",null,{"className":"custom-code","children":"id"}]," 字段作为 ",["$","code",null,{"className":"custom-code","children":"AUTO INCREMENT"}],"，并将其用作主键，但主键的选择取决于开发者。"]}],["$","h3",null,{"className":"content-header","id":"如果你没有自己创建任何主键会发生什么","children":[["$","a",null,{"href":"#如果你没有自己创建任何主键会发生什么","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"如果你没有自己创建任何主键会发生什么？"]}],["$","p",null,{"children":["创建主键并不是强制性的。如果在创建表时没有定义主键，InnoDB 会隐式创建一个内部的聚簇索引。这种隐式创建的主键通常是一个 6 字节的行 ID。这在你没有显式指定主键的情况下，可以确保 InnoDB 的正常工作。因为根据设计，InnoDB 每个表必须有一个主键。",["$","strong",null,{"children":"所以，一旦你稍后为该表创建了主键，InnoDB 会删除之前自动定义的主键"}],"。"]}],["$","p",null,{"children":"由于我们目前没有定义任何主键，让我们看看 InnoDB 默认为我们创建了什么："}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"SHOW"}]," ",["$","span",null,{"className":"token keyword","children":"EXTENDED"}]," ",["$","span",null,{"className":"token keyword","children":"INDEX"}]," ",["$","span",null,{"className":"token keyword","children":"FROM"}]," index_demo",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture2.png","alt":"Maple","width":"1292","height":"243"}]}]}],["$","p",null,{"children":[["$","code",null,{"className":"custom-code","children":"EXTENDED"}]," 选项显示了所有用户不可用但由 MySQL 完全管理的索引。"]}],["$","p",null,{"children":["在这里，我们可以看到 MySQL 已经定义了一个复合索引（我们稍后会讨论复合索引），包含 ",["$","code",null,{"className":"custom-code","children":"DB_ROW_ID"}],"、",["$","code",null,{"className":"custom-code","children":"DB_TRX_ID"}],"、",["$","code",null,{"className":"custom-code","children":"DB_ROLL_PTR"}]," 以及表中定义的所有列。在没有用户定义主键的情况下，这个索引被用来唯一地查找记录。"]}],["$","h3",null,{"className":"content-header","id":"关键字和索引之间的区别是什么","children":[["$","a",null,{"href":"#关键字和索引之间的区别是什么","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"关键字和索引之间的区别是什么？"]}],["$","p",null,{"children":["虽然术语“关键字”（",["$","code",null,{"className":"custom-code","children":"key"}],"）和“索引”（",["$","code",null,{"className":"custom-code","children":"index"}],"）可以互换使用，但它们的含义有所不同。",["$","code",null,{"className":"custom-code","children":"key"}],"意味着对列行为施加的一种约束。在这种情况下，主键是一种非空字段的约束，它唯一地标识每一行。另一方面，",["$","code",null,{"className":"custom-code","children":"index"}],"是一种特殊的数据结构，有助于在表中进行数据搜索。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"关键字（Key）"}]," ：关键字是一种约束，通常用于确保数据完整性和唯一性。主键（Primary Key）是一种常见的关键字约束，它确保列中的值唯一且非空。例如，在 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 列上添加主键意味着每个电话号码都是唯一的，且不能为空。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"索引（Index）"}]," ：索引是一种数据结构，旨在加速数据库查询操作。它类似于书中的索引，通过建立某些列的快速查找路径，减少数据搜索时间。索引不仅用于主键，还可以用于其他列以提高查询效率。"]}],["$","p",null,{"children":["我们现在在 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 列上创建主键，并检查创建的索引："]}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"ALTER"}]," ",["$","span",null,{"className":"token keyword","children":"TABLE"}]," index_demo ",["$","span",null,{"className":"token keyword","children":"ADD"}]," ",["$","span",null,{"className":"token keyword","children":"PRIMARY"}]," ",["$","span",null,{"className":"token keyword","children":"KEY"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"phone_no",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"SHOW"}]," INDEXES ",["$","span",null,{"className":"token keyword","children":"FROM"}]," index_demo",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],["$","p",null,{"children":["需要注意的是，不能使用 ",["$","code",null,{"className":"custom-code","children":"CREATE INDEX"}]," 来创建主键，必须使用 ",["$","code",null,{"className":"custom-code","children":"ALTER TABLE"}],"。"]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture3.png","alt":"Maple","width":"1289","height":"204"}]}]}],["$","p",null,{"children":["在上面的截图中，我们看到在 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 列上创建了一个主键。以下是对截图中各列的描述："]}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Table"}],"：创建索引的表。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Non_unique"}],"：如果值为 1，表示索引不是唯一的；如果值为 0，表示索引是唯一的。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Key_name"}],"：创建的索引的名称。在 MySQL 中，主键的名称总是 ",["$","code",null,{"className":"custom-code","children":"PRIMARY"}],"，无论你在创建索引时是否提供了索引名称。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Seq_in_index"}],"：索引中列的顺序号。如果索引包含多个列，顺序号将根据创建索引时列的顺序进行分配。顺序号从 1 开始。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Collation"}],"：列在索引中的排序方式。",["$","code",null,{"className":"custom-code","children":"A"}]," 表示升序，",["$","code",null,{"className":"custom-code","children":"D"}]," 表示降序，",["$","code",null,{"className":"custom-code","children":"NULL"}]," 表示未排序。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Cardinality"}],"：索引中唯一值的估计数量。更高的基数意味着查询优化器选择该索引用于查询的可能性更高。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Sub_part"}],"：索引前缀。如果整个列被索引，则为 ",["$","code",null,{"className":"custom-code","children":"NULL"}],"。如果列是部分索引，则显示已索引的字节数。我们稍后会定义部分索引。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Packed"}],"：表示关键字的打包方式；如果未打包，则为 ",["$","code",null,{"className":"custom-code","children":"NULL"}],"。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Null"}],"：如果列可能包含 ",["$","code",null,{"className":"custom-code","children":"NULL"}]," 值，则显示 ",["$","code",null,{"className":"custom-code","children":"YES"}],"；如果不包含 ",["$","code",null,{"className":"custom-code","children":"NULL"}]," 值，则为空。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Index_type"}],"：指示用于此索引的索引数据结构。一些可能的候选者包括 ",["$","code",null,{"className":"custom-code","children":"BTREE"}],"、",["$","code",null,{"className":"custom-code","children":"HASH"}],"、",["$","code",null,{"className":"custom-code","children":"RTREE"}]," 或 ",["$","code",null,{"className":"custom-code","children":"FULLTEXT"}],"。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Comment"}],"：有关索引的信息，不在其自己的列中描述。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"Index_comment"}],"：使用 ",["$","code",null,{"className":"custom-code","children":"COMMENT"}]," 属性创建索引时为索引指定的注释。"]}]}]]}],["$","p",null,{"children":["现在，让我们看看这个索引是否减少了在查询的 ",["$","code",null,{"className":"custom-code","children":"WHERE"}]," 子句中给定 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 时需要搜索的行数。"]}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"EXPLAIN"}]," ",["$","span",null,{"className":"token keyword","children":"SELECT"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token keyword","children":"FROM"}]," index_demo ",["$","span",null,{"className":"token keyword","children":"WHERE"}]," phone_no ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"'9876543210'"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture4.png","alt":"Maple","width":"898","height":"139"}]}]}],["$","p",null,{"children":["在上图中，请注意 ",["$","code",null,{"className":"custom-code","children":"rows"}]," 列仅返回了 1，",["$","code",null,{"className":"custom-code","children":"possible_keys"}]," 和 ",["$","code",null,{"className":"custom-code","children":"key"}]," 都返回了 ",["$","code",null,{"className":"custom-code","children":"PRIMARY"}],"。这实际上意味着使用名为 ",["$","code",null,{"className":"custom-code","children":"PRIMARY"}]," 的主索引（当你创建主键时，名称会自动分配），查询优化器直接找到记录并获取它。这非常高效。"]}],["$","p",null,{"children":["通过使用主索引 ",["$","code",null,{"className":"custom-code","children":"PRIMARY"}],"，查询优化器能够直接定位到所需的记录，而不必遍历整个表。这显著提高了查询的效率。这种效率提升在处理大量数据时尤为明显。"]}],["$","h2",null,{"className":"content-header","id":"聚簇索引","children":[["$","a",null,{"href":"#聚簇索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"聚簇索引"]}],["$","p",null,{"children":["聚簇索引与数据一起位于同一个表空间或同一个磁盘文件中。你可以认为聚簇索引是一个 ",["$","code",null,{"className":"custom-code","children":"B-Tree"}]," 索引，其叶节点是磁盘上的实际数据块，因为索引和数据共存于一起。这种索引根据索引键的逻辑顺序在磁盘上物理地组织数据。在聚簇索引中，数据行的物理顺序与索引的逻辑顺序相同。这意味着数据库在读取索引时，可以直接访问数据行，而不需要进行额外的查找操作。聚簇索引实际上重排了表中的数据行，以匹配索引的顺序。"]}],["$","ul",null,{"children":["$","li",null,{"children":[["$","strong",null,{"children":"B-Tree 索引"}]," ：",["$","code",null,{"className":"custom-code","children":"B-Tree"}],"（平衡树）是一种广泛使用的数据结构，特别适用于数据库索引。",["$","code",null,{"className":"custom-code","children":"B-Tree"}]," 索引通过分层结构组织数据，使得查找、插入和删除操作都能在对数时间内完成。在聚簇索引中，",["$","code",null,{"className":"custom-code","children":"B-Tree"}]," 的叶节点包含了实际的数据行，这使得读取数据更加高效。"]}]}],["$","h3",null,{"className":"content-header","id":"物理数据组织","children":[["$","a",null,{"href":"#物理数据组织","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"物理数据组织"]}],["$","p",null,{"children":"从物理上看，数据在磁盘上组织在成千上万个磁盘块或数据块中。对于聚簇索引来说，并不要求所有的磁盘块连续存储。物理数据块总是会根据操作系统的需要在这里或那里移动。数据库系统没有绝对的控制权来管理物理数据空间，但在数据块内部，记录可以按索引键的逻辑顺序存储或管理。以下简化的示意图对此进行了说明："}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture5.png","alt":"Maple","width":"556","height":"529"}]}]}],["$","ul",null,{"children":[["$","li",null,{"children":"黄色的大矩形表示一个磁盘块/数据块"}],["$","li",null,{"children":"蓝色的矩形表示存储在该块内的行数据"}],["$","li",null,{"children":"底部区域表示块的索引，其中红色的小矩形按照特定键的顺序排序。这些小块实际上是指向记录偏移量的指针。"}]]}],["$","p",null,{"children":"记录在磁盘块中以任意顺序存储。每当添加新记录时，它们会被添加到下一个可用空间。每当现有记录更新时，操作系统会决定该记录是否仍能适应当前位置，或者是否需要为该记录分配新位置。"}],["$","h3",null,{"className":"content-header","id":"物理数据块的管理","children":[["$","a",null,{"href":"#物理数据块的管理","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"物理数据块的管理"]}],["$","p",null,{"children":"记录的位置完全由操作系统处理，任何两条记录之间的顺序不存在确定的关系。为了按照键的逻辑顺序获取记录，磁盘页在底部包含一个索引部分，索引部分包含按照键顺序排列的偏移指针列表。每当记录被更改或创建时，索引都会进行调整。"}],["$","p",null,{"children":"通过这种方式，你实际上不需要关心实际按照某种顺序组织物理记录，而是维护一个按顺序排列的小索引部分，从而使得获取或维护记录变得非常容易。"}],["$","h3",null,{"className":"content-header","id":"聚簇索引的优势","children":[["$","a",null,{"href":"#聚簇索引的优势","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"聚簇索引的优势"]}],["$","p",null,{"children":"这种相关数据的排序或共址使得聚簇索引更快。当从磁盘获取数据时，系统会读取包含数据的整个块，因为我们的磁盘 I/O 系统以块为单位写入和读取数据。因此，在范围查询的情况下，很可能相关数据会被缓存在内存中。假设你执行以下查询："}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"SELECT"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," ",["$","span",null,{"className":"token keyword","children":"FROM"}]," index_demo ",["$","span",null,{"className":"token keyword","children":"WHERE"}]," phone_no ",["$","span",null,{"className":"token operator","children":">"}]," ",["$","span",null,{"className":"token string","children":"'9010000000'"}]," ",["$","span",null,{"className":"token operator","children":"AND"}]," phone_no ",["$","span",null,{"className":"token operator","children":"<"}]," ",["$","span",null,{"className":"token string","children":"'9020000000'"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":["当查询执行时，一个数据块被加载到内存中。假设这个数据块包含的 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 范围是从 ",["$","code",null,{"className":"custom-code","children":"9010000000"}]," 到 ",["$","code",null,{"className":"custom-code","children":"9030000000"}],"。因此，你在查询中请求的范围只是该块中数据的一个子集。如果你现在执行下一个查询来获取所有在范围内的电话号码，例如从 ",["$","code",null,{"className":"custom-code","children":"9015000000"}]," 到 ",["$","code",null,{"className":"custom-code","children":"9019000000"}],"，你不需要从磁盘再读取任何块。所有的数据都可以在当前的数据块中找到，从而聚簇索引通过在同一个数据块中尽可能多地共址相关数据来减少磁盘 I/O 操作。这种减少的磁盘 I/O 操作提高了性能。"]}],["$","p",null,{"children":"所以，如果你有一个精心设计的主键，并且你的查询是基于主键的，那么性能将会非常快。"}],["$","p",null,{"children":"聚簇索引使得查询非常高效。因为数据按照索引键的顺序存储，所以一个数据块中包含的记录范围很可能覆盖查询条件的范围。这意味着一次磁盘读取可以满足多个查询请求。"}],["$","ul",null,{"children":["$","li",null,{"children":[["$","strong",null,{"children":"数据缓存和内存利用"}],"： 当一个数据块被加载到内存中时，该块中的所有数据都被缓存。如果后续的查询请求的数据在这个块的范围内，数据库系统可以直接从内存中获取数据，而不需要再次进行磁盘 I/O 操作。这大大提高了查询速度。"]}]}],["$","h3",null,{"className":"content-header","id":"聚簇索引的限制","children":[["$","a",null,{"href":"#聚簇索引的限制","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"聚簇索引的限制"]}],["$","p",null,{"children":["由于聚簇索引决定了数据在磁盘上的物理存储顺序，因此",["$","strong",null,{"children":"每个表只能有一个聚簇索引"}],"。这是因为一个表的数据行只能按照一种顺序存储。"]}],["$","h3",null,{"className":"content-header","id":"主键与聚簇索引的关系","children":[["$","a",null,{"href":"#主键与聚簇索引的关系","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"主键与聚簇索引的关系"]}],["$","p",null,{"children":"你不能使用 InnoDB 在 MySQL 中手动创建聚簇索引。MySQL 会为你选择它。但是 MySQL 是如何选择的呢？以下是 MySQL 文档中的摘录："}],["$","blockquote",null,{"children":["$","ol",null,{"children":[["$","li",null,{"children":["当你在表上定义一个 ",["$","code",null,{"className":"custom-code","children":"PRIMARY KEY"}]," 时，",["$","code",null,{"className":"custom-code","children":"InnoDB"}]," 会将其用作聚簇索引。为你创建的每个表定义一个主键。如果没有逻辑上唯一且非空的列或列集合，请添加一个新的自动递增列，其值将自动填充。"]}],["$","li",null,{"children":["如果你没有为表定义 ",["$","code",null,{"className":"custom-code","children":"PRIMARY KEY"}],"，MySQL 会找到第一个所有键列均为 ",["$","code",null,{"className":"custom-code","children":"NOT NULL"}]," 的 ",["$","code",null,{"className":"custom-code","children":"UNIQUE"}]," 索引，并将其用作聚簇索引。"]}],["$","li",null,{"children":["如果表没有 ",["$","code",null,{"className":"custom-code","children":"PRIMARY KEY"}]," 或合适的 ",["$","code",null,{"className":"custom-code","children":"UNIQUE"}]," 索引，",["$","code",null,{"className":"custom-code","children":"InnoDB"}]," 会在包含行 ID 值的合成列上内部生成一个名为 ",["$","code",null,{"className":"custom-code","children":"GEN_CLUST_INDEX"}]," 的隐藏聚簇索引。行按 ",["$","code",null,{"className":"custom-code","children":"InnoDB"}]," 分配给这些行的 ID 排序。行 ID 是一个 6 字节的字段，随着新行的插入单调递增。因此，按行 ID 排序的行在物理上按插入顺序排列。"]}]]}]}],["$","p",null,{"children":"简而言之，MySQL InnoDB 引擎实际上将主索引管理为聚簇索引以提高性能，因此主键和磁盘上的实际记录是聚簇在一起的。在没有主键或唯一索引的情况下，InnoDB 会创建一个内部隐藏的聚簇索引。这种情况下，InnoDB 使用一个包含行 ID 值的合成列，并按插入顺序对行进行排序。这种排序方式虽然不会显式出现在表结构中，但仍然会影响数据的物理存储顺序。"}],["$","h3",null,{"className":"content-header","id":"结构化主键聚簇索引","children":[["$","a",null,{"href":"#结构化主键聚簇索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"结构化主键（聚簇）索引"]}],["$","p",null,{"children":"索引通常作为 B+ 树在磁盘和内存中维护，任何索引都存储在磁盘上的块中。这些块称为索引块。索引块中的条目始终按照索引或搜索键排序。索引的叶子块包含行定位器。对于主键索引，行定位器指向数据块在磁盘上对应的物理位置的虚拟地址，这些数据块中的行按照索引键排序。数据库系统使用这些地址来直接访问或定位数据块，从而实现快速的数据检索和访问。"}],["$","p",null,{"children":"在下面的图示中，左侧的矩形表示叶子级别的索引块，右侧的矩形表示数据块。逻辑上看，数据块按照排序顺序排列，但如前所述，实际的物理位置可能散布在各处。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture6.png","alt":"Maple","width":"441","height":"471"}]}]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"索引块（Leaf Level Index Blocks）"}],"：这些块包含索引的叶子节点，每个条目按索引键排序，每个叶子块都指向一个或多个数据块。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"数据块（Data Blocks）"}],"：这些块包含实际的数据记录。逻辑上，数据记录按照主键的顺序排列，但实际物理存储位置可能分散在磁盘的不同位置。"]}]]}],["$","h3",null,{"className":"content-header","id":"能否在非主键列上创建主索引","children":[["$","a",null,{"href":"#能否在非主键列上创建主索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"能否在非主键列上创建主索引？"]}],["$","p",null,{"children":"虽然MySQL会在主键列上自动创建主索引，但实际上在某些数据库系统中，可以在非主键列上创建主索引。在MySQL中，主索引与主键紧密关联，不典型情况下不会在非主键列上创建主索引。然而，在其他支持在非主键列上创建聚簇索引的数据库（如某些SQL Server版本）中，您可以明确地在任何列上定义聚簇索引，而不仅仅是主键。"}],["$","ul",null,{"children":[["$","li",null,{"children":"主键列**：当在主键列上创建主索引时，索引中的所有条目都是唯一的。这种唯一性确保每一行都能通过主键值唯一地标识。**"}],["$","li",null,{"children":"非主键列**：如果在非主键列上创建主索引（聚簇索引），索引中的条目可能不是唯一的。这意味着多个行可能具有相同的索引值，导致索引中存在重复的键条目。"}]]}],["$","h3",null,{"className":"content-header","id":"是否可以删除一个主键","children":[["$","a",null,{"href":"#是否可以删除一个主键","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"是否可以删除一个主键？"]}],["$","p",null,{"children":"当然可以删除一个主键。当您删除一个主键时，相关的聚簇索引以及该列的唯一性属性都会丢失。"}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"ALTER"}]," ",["$","span",null,{"className":"token keyword","children":"TABLE"}]," ",["$","span",null,{"className":"token identifier","children":[["$","span",null,{"className":"token punctuation","children":"`"}],"index_demo",["$","span",null,{"className":"token punctuation","children":"`"}]]}]," ",["$","span",null,{"className":"token keyword","children":"DROP"}]," ",["$","span",null,{"className":"token keyword","children":"PRIMARY"}]," ",["$","span",null,{"className":"token keyword","children":"KEY"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":"如果主键不存在，则会收到以下错误信息："}],["$","$L12",null,{"className":"language-js","children":["$","code",null,{"className":"code-highlight language-js","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token string","children":"\"ERROR 1091 (42000): Can't DROP 'PRIMARY'; check that column/key exists\""}],"\n"]}]}]}],["$","h3",null,{"className":"content-header","id":"主索引的优势","children":[["$","a",null,{"href":"#主索引的优势","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"主索引的优势"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"数据局部性"}],"：主索引基于范围查询非常高效。由于主索引是聚簇的，记录在物理上有序，因此从磁盘读取的数据块很可能包含查询所需的所有数据。因此，主索引提供了数据的局部性。主索引确保相关数据在物理上相邻存储，这对于范围查询尤其有利。当查询基于主键时，数据库可以直接定位和读取所需数据，从而大大提高了查询的速度。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"查询性能优化"}],"：任何能够利用主键的查询都非常快速。主索引的设计确保了数据的快速访问和检索，特别是在处理大量数据时效果更加显著。"]}]]}],["$","h3",null,{"className":"content-header","id":"主索引的缺点","children":[["$","a",null,{"href":"#主索引的缺点","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"主索引的缺点"]}],["$","ul",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"DML 操作对性能的影响"}],"：主索引包含了通过虚拟地址空间直接引用数据块地址的信息，而磁盘块是按照索引键的顺序进行物理排序的。因此，每当操作系统由于诸如插入、更新或删除（DML）操作而进行磁盘页拆分时，主索引也需要进行相应的更新。这意味着DML操作会对主索引的性能产生一定的压力。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"索引更新开销"}],"：随着数据的不断插入、更新和删除，主索引需要频繁地调整和更新，以保持索引的有序性和正确性。这些操作可能会导致索引的碎片化，进而影响到数据库的整体性能。"]}]}]]}],["$","h2",null,{"className":"content-header","id":"次要索引","children":[["$","a",null,{"href":"#次要索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"次要索引"]}],["$","p",null,{"children":"除聚簇索引外的任何索引都称为次要索引。与主索引不同，次要索引不影响物理存储位置。"}],["$","h3",null,{"className":"content-header","id":"何时需要次要索引","children":[["$","a",null,{"href":"#何时需要次要索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"何时需要次要索引？"]}],["$","p",null,{"children":["在您的应用程序中，可能有多种情况下不使用主键查询数据库。例如，假设电话号码（",["$","code",null,{"className":"custom-code","children":"phone_no"}],"）是主键，但您可能需要使用身份证号（",["$","code",null,{"className":"custom-code","children":"pan_no"}],"）或姓名（",["$","code",null,{"className":"custom-code","children":"name"}],"）来查询数据库。在这种情况下，如果这些查询的频率非常高，就需要在这些列上创建次要索引。"]}],["$","p",null,{"children":"次要索引提供了在非主键列上快速定位和检索数据的能力。通过在经常被查询的列上创建次要索引，可以显著提高查询的性能和响应速度，尤其是针对非主键查询的场景。"}],["$","h3",null,{"className":"content-header","id":"如何在mysql中创建次要索引","children":[["$","a",null,{"href":"#如何在mysql中创建次要索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"如何在MySQL中创建次要索引？"]}],["$","p",null,{"children":["要在MySQL中创建次要索引，可以使用以下命令在 ",["$","code",null,{"className":"custom-code","children":"index_demo"}]," 表的 ",["$","code",null,{"className":"custom-code","children":"name"}]," 列上创建一个次要索引。"]}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"CREATE"}]," ",["$","span",null,{"className":"token keyword","children":"INDEX"}]," secondary_idx_1 ",["$","span",null,{"className":"token keyword","children":"ON"}]," index_demo ",["$","span",null,{"className":"token punctuation","children":"("}],"name",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture7.png","alt":"Maple","width":"1336","height":"334"}]}]}],["$","p",null,{"children":"创建次要索引步骤说明："}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"CREATE INDEX 语句"}],": 使用 ",["$","code",null,{"className":"custom-code","children":"CREATE INDEX"}]," 命令。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"索引名称"}],": 在 ",["$","code",null,{"className":"custom-code","children":"ON"}]," 关键字之后指定要创建的索引的名称，例如 ",["$","code",null,{"className":"custom-code","children":"secondary_idx_1"}],"。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"表名与列名"}],": 指定索引要创建在哪个表的哪个列上，例如 ",["$","code",null,{"className":"custom-code","children":"(name)"}]," 表示在 ",["$","code",null,{"className":"custom-code","children":"index_demo"}]," 表的 ",["$","code",null,{"className":"custom-code","children":"name"}]," 列上创建索引。"]}]]}],["$","h3",null,{"className":"content-header","id":"次要索引的结构","children":[["$","a",null,{"href":"#次要索引的结构","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"次要索引的结构"]}],["$","p",null,{"children":"在下面的图示中，红色矩形代表次要索引块。次要索引同样是在 B+ 树中进行维护，并且按照创建索引时的键进行排序。叶子节点包含了对应主索引中数据的键的副本。"}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture8.png","alt":"Maple","width":"741","height":"456"}]}]}],["$","p",null,{"children":"因此，可以理解为次要索引有对主键地址的引用，尽管实际上并非如此。通过次要索引检索数据意味着您需要遍历两棵 B+ 树 —— 一棵是次要索引的 B+ 树本身，另一棵是主索引的 B+ 树。"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"B+ 树结构"}],"：次要索引和主索引都是基于 B+ 树实现的，这种树结构有助于快速的数据检索和范围查询。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"数据定位"}],"：次要索引的叶子节点包含对应数据在主索引中的主键信息，而非直接的物理地址引用。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"检索过程"}],"：通过次要索引检索数据需要先在次要索引 B+ 树中定位到对应的键，然后使用主索引 B+ 树中的主键信息来获取实际数据。"]}]]}],["$","h3",null,{"className":"content-header","id":"次要索引的优势","children":[["$","a",null,{"href":"#次要索引的优势","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"次要索引的优势"]}],["$","ul",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"灵活的查询选项"}],"：次要索引提供了在非主键列上快速定位和检索数据的能力。通过在经常被查询的列上创建次要索引，可以显著提高查询的性能和响应速度，特别是在复杂查询场景下。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"多样化的查询需求"}],"：在逻辑上，您可以根据需要创建任意多个次要索引。然而，实际上需要多少个索引则需要认真考虑，因为每个索引都会带来一定的性能开销。在现实应用中，您可能需要根据多种不同的查询需求来优化数据库的性能。通过创建适当的次要索引，可以支持多种查询模式，包括范围查询、排序和连接操作，从而更好地满足应用程序的功能需求。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"减少数据扫描"}],"：次要索引可以减少数据扫描范围，从而加快查询的执行速度。通过索引的使用，数据库可以更有效地定位和访问所需的数据行，而无需全表扫描。"]}]}]]}],["$","h3",null,{"className":"content-header","id":"次要索引的缺点","children":[["$","a",null,{"href":"#次要索引的缺点","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"次要索引的缺点"]}],["$","p",null,{"children":"使用类似 DELETE 和 INSERT 的数据操作（DML）时，次要索引也需要进行更新，以便删除或插入主键列的副本。在这种情况下，存在大量次要索引可能会导致以下问题："}],["$","ul",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"管理和维护成本"}],"：每个次要索引都需要额外的存储空间和管理成本。随着数据库中次要索引的增加，管理和维护索引的复杂性也会显著增加，特别是在大规模数据操作时。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"存储效率问题"}],"：如果主键非常大，例如 URL 类型的数据，由于次要索引包含主键列值的副本，会导致存储效率低下。每个次要索引都需要存储主键列值的副本，这对于大型主键来说可能会造成存储空间的浪费。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"复合效应"}]," ：多个次要索引意味着主键列值的多个副本存储在数据库中，加重了存储负担。由于主键本身也存储这些键值，因此在存储成本方面会产生相当大的综合效应。"]}]}]]}],["$","h3",null,{"className":"content-header","id":"删除主键索引前的考虑事项","children":[["$","a",null,{"href":"#删除主键索引前的考虑事项","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"删除主键索引前的考虑事项"]}],["$","p",null,{"children":"在 MySQL 中，您可以通过删除主键来删除主键索引。我们已经知道，次要索引依赖于主键索引。因此，如果删除主键索引，所有次要索引都必须更新以包含新的主键索引键的副本，MySQL 会自动调整这些过程。"}],["$","p",null,{"children":"当存在多个次要索引时，这个过程是昂贵的。此外，其他表可能具有对主键的外键引用，因此在删除主键之前，您需要删除这些外键引用。"}],["$","p",null,{"children":"当删除主键时，MySQL 会在内部自动创建另一个主键，这是一个昂贵的操作。"}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"次要索引的更新"}],"：删除主键索引会导致所有依赖于该主键的次要索引需要更新，这可能会影响数据库的性能和资源消耗。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"外键约束"}],"：确保删除主键索引之前，处理所有依赖于该主键的外键约束，以保证数据的引用完整性。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"系统开销"}],"：由于 MySQL 在删除主键后会自动创建新的主键，因此这种操作会增加系统的开销和资源使用。"]}]]}],["$","h2",null,{"className":"content-header","id":"unique-key-index唯一键索引","children":[["$","a",null,{"href":"#unique-key-index唯一键索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"UNIQUE Key Index（唯一键索引）"]}],["$","p",null,{"children":["与主键类似，唯一键索引也可以唯一标识记录，但有一个区别——唯一键列可以包含空值（",["$","code",null,{"className":"custom-code","children":"null"}],"）。"]}],["$","p",null,{"children":["在 MySQL 中，与其他数据库服务器不同，唯一键列可以包含尽可能多的空值。在 SQL 标准中，",["$","code",null,{"className":"custom-code","children":"null"}]," 表示未定义的值。因此，如果 MySQL 在唯一键列中包含一个 ",["$","code",null,{"className":"custom-code","children":"null"}]," 值，它必须假设所有 ",["$","code",null,{"className":"custom-code","children":"null"}]," 值都是相同的。"]}],["$","p",null,{"children":["但从逻辑上讲，这并不正确，因为 ",["$","code",null,{"className":"custom-code","children":"null"}]," 表示未定义 —— 未定义的值之间不能进行比较，这是 ",["$","code",null,{"className":"custom-code","children":"null"}]," 的特性。由于 MySQL 无法确定所有 ",["$","code",null,{"className":"custom-code","children":"null"}]," 值是否相同，它允许在列中包含多个 ",["$","code",null,{"className":"custom-code","children":"null"}]," 值。"]}],["$","p",null,{"children":"以下命令展示了如何在 MySQL 中创建一个唯一键索引："}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"CREATE"}]," ",["$","span",null,{"className":"token keyword","children":"UNIQUE"}]," ",["$","span",null,{"className":"token keyword","children":"INDEX"}]," unique_idx_1 ",["$","span",null,{"className":"token keyword","children":"ON"}]," index_demo ",["$","span",null,{"className":"token punctuation","children":"("}],"pan_no",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","h3",null,{"className":"content-header","id":"注意事项","children":[["$","a",null,{"href":"#注意事项","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"注意事项"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"空值处理"}],"：MySQL 中的唯一键允许包含多个空值，这与其他数据库的行为不同，需特别注意处理空值的情况。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"逻辑一致性"}],"：理解 ",["$","code",null,{"className":"custom-code","children":"null"}]," 的语义是非常重要的，",["$","code",null,{"className":"custom-code","children":"null"}]," 表示未定义的值，不能假设所有 ",["$","code",null,{"className":"custom-code","children":"null"}]," 值都相同。"]}]]}],["$","p",null,{"children":["唯一键索引提供了一种在数据库中确保列值唯一性的方法，但需要注意其与 ",["$","code",null,{"className":"custom-code","children":"null"}]," 值的处理方式及其影响。"]}],["$","h2",null,{"className":"content-header","id":"composite-index复合索引","children":[["$","a",null,{"href":"#composite-index复合索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"Composite Index（复合索引）"]}],["$","p",null,{"children":"MySQL 允许您在多个列上定义索引，最多可以是 16 列。这种索引称为多列索引、复合索引或组合索引。"}],["$","p",null,{"children":["假设我们在 4 列上定义了一个索引 — ",["$","code",null,{"className":"custom-code","children":"col1"}],"、",["$","code",null,{"className":"custom-code","children":"col2"}],"、",["$","code",null,{"className":"custom-code","children":"col3"}],"、",["$","code",null,{"className":"custom-code","children":"col4"}],"。使用复合索引，我们可以在 ",["$","code",null,{"className":"custom-code","children":"col1"}],"、",["$","code",null,{"className":"custom-code","children":"(col1, col2)"}],"、",["$","code",null,{"className":"custom-code","children":"(col1, col2, col3)"}],"、",["$","code",null,{"className":"custom-code","children":"(col1, col2, col3, col4)"}]," 上进行搜索。因此，可以使用索引列的任何左侧前缀，但不能省略中间的列，例如 ",["$","code",null,{"className":"custom-code","children":"(col1, col3)"}]," 或 ",["$","code",null,{"className":"custom-code","children":"(col1, col2, col4)"}],"，或仅使用 ",["$","code",null,{"className":"custom-code","children":"col3"}]," 或 ",["$","code",null,{"className":"custom-code","children":"col4"}]," 等。这些组合是无效的。"]}],["$","p",null,{"children":"以下命令在我们的表中创建了两个复合索引："}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"CREATE"}]," ",["$","span",null,{"className":"token keyword","children":"INDEX"}]," composite_index_1 ",["$","span",null,{"className":"token keyword","children":"ON"}]," index_demo ",["$","span",null,{"className":"token punctuation","children":"("}],"phone_no",["$","span",null,{"className":"token punctuation","children":","}]," name",["$","span",null,{"className":"token punctuation","children":","}]," age",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"CREATE"}]," ",["$","span",null,{"className":"token keyword","children":"INDEX"}]," composite_index_2 ",["$","span",null,{"className":"token keyword","children":"ON"}]," index_demo ",["$","span",null,{"className":"token punctuation","children":"("}],"pan_no",["$","span",null,{"className":"token punctuation","children":","}]," name",["$","span",null,{"className":"token punctuation","children":","}]," age",["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture9.png","alt":"Maple","width":"1001","height":"130"}]}]}],["$","ul",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"查询优化"}],"：如果您的查询包含多个列的 ",["$","code",null,{"className":"custom-code","children":"WHERE"}]," 子句，请按照复合索引的列顺序编写子句。这样的索引将有助于优化查询性能。在决定复合索引的列顺序时，可以分析系统的不同使用案例，并尝试确定对大多数案例最有利的列顺序。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"联接和选择查询"}],"：复合索引也对 ",["$","code",null,{"className":"custom-code","children":"JOIN"}]," 和 ",["$","code",null,{"className":"custom-code","children":"SELECT"}]," 查询有帮助。例如，在以下的 ",["$","code",null,{"className":"custom-code","children":"SELECT *"}]," 查询中，将使用 ",["$","code",null,{"className":"custom-code","children":"composite_index_2"}],"。"]}]}]]}],["$","p",null,{"children":"当定义了多个索引时，MySQL 查询优化器会选择能够消除最多行或尽可能少扫描行的索引，以提高效率。"}],["$","h3",null,{"className":"content-header","id":"为什么使用复合索引为什么不定义多个次要索引","children":[["$","a",null,{"href":"#为什么使用复合索引为什么不定义多个次要索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"为什么使用复合索引？为什么不定义多个次要索引？"]}],["$","p",null,{"children":["在 MySQL 中，",["$","em",null,{"children":"每个查询仅使用一个表的一个索引，除了 UNION 操作"}],"（在 UNION 操作中，每个逻辑查询会分别执行，然后将结果合并）。因此，即使在查询中定义了多个列的多个索引，也不能保证这些索引都会被使用。"]}],["$","p",null,{"children":"MySQL 维护了称为索引统计信息（index statistics）的东西，这些统计信息帮助 MySQL 推断系统中数据的外观。索引统计信息是一种概括性的描述，但基于这些元数据，MySQL 决定哪个索引适合当前的查询。"}],["$","h3",null,{"className":"content-header","id":"复合索引的优势","children":[["$","a",null,{"href":"#复合索引的优势","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"复合索引的优势"]}],["$","ul",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"综合查询需求"}],"：复合索引允许您在多个列上定义一个索引，以支持多条件的查询优化。通过正确定义复合索引的列顺序，可以显著提高查询性能，因为MySQL可以更有效地使用这些索引来快速定位和检索数据。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"避免索引冗余"}],"：定义多个独立的次要索引可能会导致索引冗余和性能损耗，因为每个查询只能使用一个索引。复合索引通过将多个列的查询条件组合成一个索引，避免了这种冗余。"]}]}]]}],["$","h3",null,{"className":"content-header","id":"复合索引的工作原理","children":[["$","a",null,{"href":"#复合索引的工作原理","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"复合索引的工作原理"]}],["$","p",null,{"children":"复合索引将多个列的索引键连接在一起，并使用 B+ 树按排序顺序存储这些连接的键。当执行搜索时，您的搜索键的连接会与复合索引的连接键进行匹配。如果您的搜索键的顺序与复合索引列的顺序不匹配，则无法使用该索引。"}],["$","p",null,{"children":["在我们的示例中，对于以下记录，复合索引键通过连接 ",["$","code",null,{"className":"custom-code","children":"pan_no"}],"、",["$","code",null,{"className":"custom-code","children":"name"}]," 和 ",["$","code",null,{"className":"custom-code","children":"age"}]," 形成 — ",["$","code",null,{"className":"custom-code","children":"HJKXS9086Wkousik28"}],"。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"工作流程概述"}],"："]}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"连接索引键"}],"：复合索引会将指定的多个列值连接成一个键。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"排序存储"}],"：这些连接的键按照 B+ 树的排序规则在索引结构中存储。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"匹配搜索"}],"：当执行查询时，系统将您的搜索条件连接为索引键，然后在 B+ 树中查找与之匹配的索引键。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"顺序匹配"}],"：为了有效使用复合索引，查询中指定的搜索键顺序必须与复合索引定义的列顺序一致，这样系统才能利用索引进行快速定位和检索数据。"]}]}]]}],["$","h3",null,{"className":"content-header","id":"如何确定是否需要使用复合索引","children":[["$","a",null,{"href":"#如何确定是否需要使用复合索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"如何确定是否需要使用复合索引"]}],["$","p",null,{"children":"在决定是否需要创建复合索引之前，请根据您的使用情况先分析您的查询模式。如果您发现某些字段经常一起出现在多个查询中，那么可能需要考虑创建一个复合索引。"}],["$","h4",null,{"className":"content-header","id":"分析查询模式","children":[["$","a",null,{"href":"#分析查询模式","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"分析查询模式"]}],["$","ol",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"字段共现性"}],"：观察哪些字段在多个查询中经常同时出现。如果某些字段经常一起使用，考虑创建一个包含这些字段的复合索引。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"单列索引与复合索引"}],"：如果您已经在 ",["$","code",null,{"className":"custom-code","children":"col1"}]," 上创建了索引，而现在又想创建一个 ",["$","code",null,{"className":"custom-code","children":"(col1, col2)"}]," 的复合索引，那么只创建复合索引就足够了。因为单列索引 ",["$","code",null,{"className":"custom-code","children":"col1"}]," 实际上已经包含在复合索引的左侧前缀中，可以直接利用复合索引。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"基数（Cardinality）"}],"：如果在复合索引中使用的列具有高基数（即唯一值数量较多），这些列是复合索引的良好候选项。高基数的列可以帮助数据库更有效地定位和过滤数据。"]}]}]]}],["$","h4",null,{"className":"content-header","id":"示例考虑","children":[["$","a",null,{"href":"#示例考虑","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"示例考虑"]}],["$","p",null,{"children":["考虑一个 ",["$","code",null,{"className":"custom-code","children":"(col1, col2)"}]," 的复合索引："]}],["$","ul",null,{"children":[["$","li",null,{"children":["如果查询经常涉及到 ",["$","code",null,{"className":"custom-code","children":"col1"}],"，那么复合索引 ",["$","code",null,{"className":"custom-code","children":"(col1, col2)"}]," 可以直接满足这类查询的需求。"]}],["$","li",null,{"children":["如果查询需要同时使用 ",["$","code",null,{"className":"custom-code","children":"col1"}]," 和 ",["$","code",null,{"className":"custom-code","children":"col2"}],"，那么复合索引 ",["$","code",null,{"className":"custom-code","children":"(col1, col2)"}]," 可以有效地优化这类联合条件查询的性能。"]}]]}],["$","p",null,{"children":"通过合理分析查询模式和字段共现性，结合基数的考量，可以更精确地确定是否需要创建复合索引以优化数据库查询性能。"}],["$","h2",null,{"className":"content-header","id":"覆盖索引","children":[["$","a",null,{"href":"#覆盖索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"覆盖索引"]}],["$","p",null,{"children":"覆盖索引是一种特殊类型的复合索引，其中查询中涉及的所有列都存在于索引中。因此，查询优化器无需访问数据库获取数据，而是直接从索引中获取结果。"}],["$","p",null,{"children":"假设我们已经在 (pan_no, name, age) 上定义了一个复合索引。现在考虑以下查询："}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"SELECT"}]," age ",["$","span",null,{"className":"token keyword","children":"FROM"}]," index_demo ",["$","span",null,{"className":"token keyword","children":"WHERE"}]," pan_no ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"'ABCDE1234F'"}]," ",["$","span",null,{"className":"token operator","children":"AND"}]," name ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"'John Doe'"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":["查询中的 ",["$","code",null,{"className":"custom-code","children":"SELECT"}]," 和 ",["$","code",null,{"className":"custom-code","children":"WHERE"}]," 子句涉及的列都包含在复合索引中。因此，在这种情况下，我们可以直接从复合索引中获取 ",["$","code",null,{"className":"custom-code","children":"age"}]," 列的值。让我们看看对于这个查询，",["$","code",null,{"className":"custom-code","children":"EXPLAIN"}]," 命令的输出是怎样的："]}],["$","$L12",null,{"children":["$","code",null,{"className":"code-highlight language-mysql","children":["$","span",null,{"className":"code-line","children":"EXPLAIN FORMAT=JSON SELECT age FROM index_demo WHERE pan_no = 'ABCDE1234F' AND name = 'John Doe';\n"}]}]}],["$","$L12",null,{"className":"language-json","children":["$","code",null,{"className":"code-highlight language-json","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token property","children":"\"query_block\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property","children":"\"select_id\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property","children":"\"cost_info\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"query_cost\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"0.35\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token property","children":"\"table\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"table_name\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"index_demo\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"access_type\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"ref\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"possible_keys\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"composite_index_2\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"key\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"composite_index_2\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"used_key_parts\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"pan_no\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"name\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"key_length\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"165\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"ref\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"const\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"const\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"]"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"rows_examined_per_scan\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"rows_produced_per_join\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"filtered\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"100.00\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"using_index\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"cost_info\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property","children":"\"read_cost\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"0.25\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property","children":"\"eval_cost\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"0.10\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property","children":"\"prefix_cost\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"0.35\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token property","children":"\"data_read_per_join\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token string","children":"\"256\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"}"}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token property","children":"\"used_columns\""}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token punctuation","children":"["}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"name\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"age\""}],["$","span",null,{"className":"token punctuation","children":","}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token string","children":"\"pan_no\""}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":["在上述回复中，注意到有一个关键信息 — 使用 ",["$","code",null,{"className":"custom-code","children":"using_index"}]," 标志设置为 ",["$","code",null,{"className":"custom-code","children":"true"}],"，这表示覆盖索引已被用于回答查询。 覆盖索引是数据库优化中的一项重要技术，特别是在生产环境中，它可以带来显著的性能优势，尤其是当查询符合条件时。"]}],["$","h2",null,{"className":"content-header","id":"部分索引","children":[["$","a",null,{"href":"#部分索引","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"部分索引"]}],["$","p",null,{"children":["我们已经知道索引可以在一定程度上加快查询速度，但也会增加存储空间的开销。索引越多，存储需求也就越大。我们已经在列名（",["$","code",null,{"className":"custom-code","children":"name"}],"）上创建了一个名为 ",["$","code",null,{"className":"custom-code","children":"secondary_idx_1"}]," 的索引。由于 ",["$","code",null,{"className":"custom-code","children":"name"}]," 列可以包含任意长度的大值，而索引中的行定位器或行指针元数据也有其自身的大小。因此，索引可能会对存储和内存造成较高的负担。"]}],["$","p",null,{"children":["在 MySQL 中，可以创建基于数据前几个字节的索引。例如，以下命令在 name 列的前四个字节上创建了一个索引。虽然这种方法可以在一定程度上减少内存开销，但由于在此示例中，前四个字节可能在许多名称中是共同的，因此索引无法消除多行。通常，这种前缀索引适用于 ",["$","code",null,{"className":"custom-code","children":"CHAR"}],"、",["$","code",null,{"className":"custom-code","children":"VARCHAR"}],"、",["$","code",null,{"className":"custom-code","children":"BINARY"}]," 和 ",["$","code",null,{"className":"custom-code","children":"VARBINARY"}]," 类型的列。"]}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"CREATE"}]," ",["$","span",null,{"className":"token keyword","children":"INDEX"}]," secondary_index_1 ",["$","span",null,{"className":"token keyword","children":"ON"}]," index_demo ",["$","span",null,{"className":"token punctuation","children":"("}],"name",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token number","children":"4"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","p",null,{"children":"这种部分索引允许根据列的前缀来优化查询性能，尽管需要权衡存储和索引能够消除的行数。在设计数据库索引时，需要根据具体的数据模式和查询需求来决定是否使用部分索引，以达到最佳的性能和资源利用率。"}],["$","h3",null,{"className":"content-header","id":"索引背后的运作原理","children":[["$","a",null,{"href":"#索引背后的运作原理","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"索引背后的运作原理"]}],["$","p",null,{"children":"当我们定义一个索引时，让我们再次运行 SHOW EXTENDED 命令来查看详情："}],["$","$L12",null,{"className":"language-sql","children":["$","code",null,{"className":"language-sql code-highlight","children":["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"SHOW"}]," ",["$","span",null,{"className":"token keyword","children":"EXTENDED"}]," INDEXES ",["$","span",null,{"className":"token keyword","children":"FROM"}]," index_demo",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}]}]}],["$","div",null,{"className":"flex flex-col items-center justify-center text-center","children":["$","div",null,{"children":["$","$La",null,{"src":"/static/images/database/index/picture10.png","alt":"Maple","width":"1328","height":"551"}]}]}],["$","p",null,{"children":["我们在 ",["$","code",null,{"className":"custom-code","children":"name"}]," 列上定义了 ",["$","code",null,{"className":"custom-code","children":"secondary_index_1"}],"，但 MySQL 却在 ",["$","code",null,{"className":"custom-code","children":"(name, phone_no)"}]," 上创建了一个复合索引，其中 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 是主键列。我们创建了 ",["$","code",null,{"className":"custom-code","children":"secondary_index_2"}]," 在 ",["$","code",null,{"className":"custom-code","children":"age"}]," 上，MySQL 则创建了一个复合索引 ",["$","code",null,{"className":"custom-code","children":"(age, phone_no)"}],"。我们创建了 ",["$","code",null,{"className":"custom-code","children":"composite_index_2"}]," 在 ",["$","code",null,{"className":"custom-code","children":"(pan_no, name, age)"}]," 上，MySQL 则创建了一个复合索引 ",["$","code",null,{"className":"custom-code","children":"(pan_no, name, age, phone_no)"}],"。而 ",["$","code",null,{"className":"custom-code","children":"composite_index_1"}]," 已经包含了 ",["$","code",null,{"className":"custom-code","children":"phone_no"}]," 作为其一部分。"]}],["$","p",null,{"children":"因此，无论我们创建何种索引，MySQL 在后台都会创建一个支持的复合索引，该复合索引反过来指向主键。这意味着主键在 MySQL 索引世界中是一个一等公民。这也证明了所有索引都是由主索引的副本支持的。"}],["$","h2",null,{"className":"content-header","id":"索引的一般指导原则","children":[["$","a",null,{"href":"#索引的一般指导原则","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"索引的一般指导原则"]}],["$","p",null,{"children":"在决定是否使用索引以及如何使用索引时，需要考虑以下几点："}],["$","ul",null,{"children":[["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"决定索引数量和类型"}],"：索引会消耗额外的内存空间，因此需要仔细考虑你需要多少个索引以及使用何种类型的索引。"]}]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"写操作的成本"}],"：由于 DML（数据操作语言）操作会更新索引，因此具有索引的写操作成本相对较高。如果系统的写入操作频繁而读取操作不频繁，需要认真考虑是否真正需要索引。"]}]}],["$","li",null,{"children":[["$","p",null,{"children":[["$","strong",null,{"children":"基数（Cardinality）的重要性"}],"：基数指的是列中的不同值的数量。如果在基数较低的列上创建索引，这并不会带来明显的性能提升，因为索引的目的是减少搜索空间。"]}],["$","p",null,{"children":"举例来说，如果在一个布尔类型（只有 0 和 1 两个值）的列上创建索引，由于基数很低（基数为 2），索引会非常倾斜。但是，如果这个布尔字段可以与其他列组合，产生较高的基数，那么在需要时可以考虑创建该索引。"}]]}],["$","li",null,{"children":["$","p",null,{"children":[["$","strong",null,{"children":"索引的维护"}],"：索引可能需要定期维护，特别是如果索引中仍然包含旧数据。否则，这些索引将占用大量内存空间。因此，建议为索引制定一个监控计划。"]}]}]]}],["$","p",null,{"children":"最终，深入理解数据库索引的各个方面非常重要。这将有助于在进行低级系统设计时做出明智的决策。许多应用程序在现实生活中的优化取决于对这些细节的了解。精心选择的索引将显著提升应用程序的性能。"}]]}]}],["$","div",null,{"className":"pb-6 pt-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L13",null,{"slug":"database"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/backend/optimize","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Previous post: 深入探讨：如何优化你的网站后端","children":["← ","深入探讨：如何优化你的网站后端"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/paper/Fingerprint-identification-survey","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Next post: 流量指纹识别技术调研报告","children":["流量指纹识别技术调研报告"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"深入剖析数据库索引"}],["$","meta","3",{"name":"description","content":"数据库索引的使用需谨慎，它们能显著提升读操作效率，但也增加了内存消耗和写操作成本。选择合适数量和类型的索引至关重要，基数（即列中不同值的数量）对索引效果至关重要。定期维护索引是必要的，以避免内存浪费。深入理解数据库索引的各个方面，将有助于优化应用程序性能和设计决策。"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/blog/database"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/feed.xml"}],["$","meta","8",{"property":"og:title","content":"深入剖析数据库索引"}],["$","meta","9",{"property":"og:description","content":"数据库索引的使用需谨慎，它们能显著提升读操作效率，但也增加了内存消耗和写操作成本。选择合适数量和类型的索引至关重要，基数（即列中不同值的数量）对索引效果至关重要。定期维护索引是必要的，以避免内存浪费。深入理解数据库索引的各个方面，将有助于优化应用程序性能和设计决策。"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/blog/database"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"article"}],["$","meta","15",{"property":"article:published_time","content":"2024-07-09T00:00:00.000Z"}],["$","meta","16",{"property":"article:modified_time","content":"2024-07-09T00:00:00.000Z"}],["$","meta","17",{"property":"article:author","content":"mainJayLai"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"深入剖析数据库索引"}],["$","meta","20",{"name":"twitter:description","content":"数据库索引的使用需谨慎，它们能显著提升读操作效率，但也增加了内存消耗和写操作成本。选择合适数量和类型的索引至关重要，基数（即列中不同值的数量）对索引效果至关重要。定期维护索引是必要的，以避免内存浪费。深入理解数据库索引的各个方面，将有助于优化应用程序性能和设计决策。"}],["$","meta","21",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
